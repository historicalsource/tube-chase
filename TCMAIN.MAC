		.TITLE TCMAIN -- TUBE CHASE MAINLINE
;
;TABLES
	.GLOBL SKILL1
;
;AUX ROUTINES
	.GLOBL MOTION,MULT,NEG,TARGET,ERASE,CENTER
	.GLOBL SLOWDN,MOTOUT,COLCHG,MOTSET,OBJDAC
	.GLOBL STSOUND,CSOUND
;SOUND ROUTINE NEEDS THE FOLLOWING:
;RAM CELLS (DOES NOT HAVE TO BE 0 PAGE):
	.GLOBL SSTAT,SOUNDN,POINT,CURRENT
	.GLOBL FRAMES,COUNT,STATE,LOCKOUT
;EXTERNAL REFERENCES (SUCH AS POKEY)
	.GLOBL AUDF1,AUDCTL
;
;OTHER LABELS OTHER PEOPLE NEED TO KNOW ABOUT
;
;SOUND NAMES (EQUATES)
;
	.GLOBL EXPLOS,PHASER
;
;A POINTER TO THE 'VERTIGO' PICTURE
;
	.GLOBL T.OFF
;
;TEST GLOBS
;
	.GLOBL MESS,INIT,POWRON,GAME,ASCAY
;
;A POINTER TO 'SED' FOR SOFTWARE SECURITY...USED BY TCINT
;
	.GLOBL SED1
	.PAGE
	.ASECT
	.ENABL AMA
	.RADIX 16
	.SBTTL GAME DESCRIPTION & ALLOCATION
	.REPT 0
**********************************************
*PROJECT #:	16703
*
*DISK #:	99 & B41
*
*HARDWARE:	DAVE SHERMAN "SPECIAL ELLIPSE"
*
*ASSEMBLY:	...=DX1:TCMAIN
*
*LINK:		... = DX1:TCMAIN,TCMESG,TCMOT,TCSOUN,TCPIC,TCINT,TCTEST
*
*DESCRIPTION:	THIS IS A 1 PLAYER GAME WHERE
*		THE PLAYER TRIES TO "FLY"
*		THROUGH A TUBE WHICH MOVES UP,
*		DOWN, LEFT & RIGHT.  (MOTION
*		IS NIGHT DRIVER STYLE)
*
***********************************************
*
*PROGRAMMER:	OWEN RUBIN
*
*ROUTINES BY:	ED LOGG, DAVE SHEPPERD
*
*CHECKER:
*
***********************************************
	.ENDR
	.INCLUDE TCDEF	;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.ASECT
	.=PROG
	.SBTTL GAME
	.MACRO LAH LABEL
	LDA I,0
	.=.-1
	.ENABL M68
	.WORD LABEL
	.DSABL M68
	.=.-1
	.ENDM
	.MACRO LAL LABEL
	LDA I,0
	.=.-1
	.WORD LABEL
	.=.-1
	.ENDM
;****************************************************
;***						  ***
;***			MAIN GAME		  ***
;***						  ***
;****************************************************
;
; STATE	0 = CRASH
;	1 =
;	2 =
;	3 = BONUS SCORE REACHED
;	4 = BONUS TIME
;	5 = ERR 1
;	6 =
;	7 = ATTRACT MODE
;


	.BYTE 8A			;CKSUM 1
	.SBTTL	(CK1)
	.SBTTL MAIN LOOP
GAME:	JSR CLRALL		;CLEAR ALL
	JSR CRAMIT		;INIT HI SCORES
	LDY #SECOFF
SED1:	LDA #0F8
	STA NY,SECIND		;PLACE SED
	LDA I,0FF
	STA LOW
	STA LOW+1		;INIT POT STUFF
	STA UPDFLG		;NO NEW HIGH SCORES ON POWER UP
ATTRCT:
	LDA I,80		;SET ATTRACT MODE
	STA Z,STATE
	CLI
	LDA I,0			;POINTER FOR NEXT AVAILABLE ELLIPSE
	STA INDEX
MAIN:	LDA I,0FF
	STA OKOUT		;TELL INTERRUPT IT'S OK TO OUTPUT
19$:	LDA READY		;WAIT FOR POKEY DATA
	BNE 19$
	LDA OPTION		;GET OTHER MESG BIT
	AND #4
	LSR
	LSR
	LSR			;PUT INTO CARRY
	LDA LANG+1		;OTHER BIT LEFT IN D8
	ROL			;8 TO C, C TO 0
	ROL			;0 TO 2, C TO 0
	STA LANG
	BIT TEST
	BMI 1$
	JMP POWRON
1$:	LSR SYNC
	BCC 1$
	INC FRAMC		;NEXT FRAME
	BNE 2$
	INC ATTIM
2$:	LDA FRAMC
	AND I,1F
	BNE 21$
	INC LIFETM
	BNE 21$			;DON'T WRAP TO 0
	DEC LIFETM
21$:	AND I,01		;PLUSE RATE
	EOR I,1			;ON OPPISITE FRAMES
	BNE 11$
	SEC
	LDA COLARY+MOTG
	SBC I,0F0		;PULLSATE INTENSITY OF RED COLOR...
	BNE 3$
	LDA I,RED			;...IN MOTION OBJECT
3$:	STA COLARY+MOTG
	BIT RANDOM
	BVC 32$
	EOR I,REDYLC		;RED/YELLOW CONSTANT
	STA COLARY+MOTG		;RED/YELLOW
32$:	LDY DIR2		;DIRECTION CHANGE REGISTER
	LDA I,1			;SHELL HIT?
	BIT OBJST
	BEQ 31$
	LDA COLARY+MOTG		;EXPLOSION ALL RED
	EOR I,REDYLC			;OPPISTIT COLOR OF RED
	STA COLARY+MOTW
	STA COLARY+MOTD
	JMP 11$
31$:	BVC 4$		;EXPLODING (FROM BIT ABOVE)
	JSR FLASH		;FLASH MOTION OBJECT COLORS
	JMP 11$
4$:	BIT STATE
	BPL 13$			;NO SKIP FLASH
	LDA UPDFLG		;INITIALS?
	BPL 41$			;IF YES, KEEP COLORS MOVING
	LDA I,ATCON		;ATTRACT, IS IT SKIP?
	BIT ATTIM
	BEQ 11$
41$:	LDA COLARY+MOTW
5$:	JSR COLCHG		;CHANGE COLOR
	STA COLARY+MOTW
	STY DIR2
	AND I,0F		;COLOR ONLY
;	CMP I,0			;NO BLACK COLOR
	BEQ 41$
11$:
	LDA $CMODE
	AND I,03		;FREE PLAY?
	BNE 16$			;IF NOT, NO WORRY
	LDA I,1
	STA $$CRDT		;ELSE STORE 1 CREDIT
16$:	LDY I,0		;NO SOUNDS ( AS A GUESS OF IN CASE WE BRANCH)
	LDA STATE
	BPL 13$
	LDA $$CRDT
	ORA $CNCT		;NEED A MESSAGE?
	BEQ 17$
	JSR MESGD
17$:	LDA I,HLT2
	STA HILIGHT
	LDA $$CRDT		;ANY CREDIT?
	BNE 20$
	LDA UPDFLG
	BPL 12$			;SKIP IF DOING INITIALS
	LDX #5			;GAME OVER MESSAGE
	LDA $CNCT		;ANY COINS?
	BEQ 6$			;OK
	LDX #25.		;IF COINS, NEED ANOTHER
	LDY I,0A3		;BEEP ON NEED A COIN
6$:	LDA I,20
	BIT FRAMC		;ON/OFF?
	BNE 15$
	TXA
	CLC
	ADC #80			;ERASE MESSAGE
	TAX
	LDY #0			;NO SOUND
15$:	TYA			;A SAVED BY MESS
	JSR MESS		;WRITE MESSAGE
	TAY			;GET BACK Y
12$:	LDA I,90		;TONE FREQ
	STA AUDF41		;OUTPUT TO POKEY
	STY AUDC41		;OUTPUT CONTROL (ON/OFF)
13$:	JMP WAIT		; & AIT
20$:	LDA I,0
	STA AUDC41		;(IN CASE 'INSERT COIN' LEFT SOUND ON)
	LDX #15.		;'PUSH START' MESSAGE PTR
	LDA FRAMC		;FLASH START LAMP
	AND I,0F
	BNE 28$			;NO CHANGE
	LDA I,10
	BIT FRAMC		;ON OR OFF
	BNE 27$			;ON
	LDA I,40		;OFF
	ORA OUT202
	STA OUT202
	BIT UPDFLG		;INITIALS?
	BPL 28$			;SKIP IF YES
	JSR MESS
	BCS 28$			;WRITE 'PUSH START' ( CARRY SET FROM TYPE)
27$:	LDA OUT202
	AND I,0BF		;LAMP OFF
	STA OUT202
	BIT UPDFLG		;INITALS?
	BPL 28$			;SKIP IF YES
	LDX I,15.+80		;ERASE MESSAGE
	JSR MESS
28$:	LDA STARTS		;START PUSHED?
	BMI WAIT		;NOPE
	DEC $$CRDT		;JUST ONE CREDIT (FOR NOW)
;
;***START GAME***
;
	.SBTTL	START GAME
GO:	LDA UPDFLG		;WERE WE DOING INITIALS?
	BMI 7$			;NO
5$:	LDA UPDINT		;YES.. WHICH INITIAL?
	CMP I,2			;IF LAST, JUST LEAVE
	BCS 6$
	CLC
	ADC UPDFLG		;ELSE MUST BLANK ANY UNCHOSEN INITIAL
	TAX
	LDA I,0
	STA X,INITL
	INC UPDINT		;NEXT INITIAL
	BNE 5$			;******* ALWAYS **********
6$:	LDA I,-1
	STA UPDFLG		;TURN OFF UPDATE FLAG
7$:	JSR CLR2
	LDA I,0C0
	ORA OUT202
	STA OUT202		;SOUNDS ON, LAMP OFF
	LDA I,08
	STA TOPS		;INIT TOP SPEED
	LDA I,0
	STA $BCCNT
	STA $BC
	STA SMOK2
	STA SCOREL
	STA SCOREH		;0 SCORE
	STA SCOREM
	STA SKILL		;SET 'TRACK' TO EASY
	STA LIFETM
	STA HITS
	STA HITS+1
	STA SHTBACK		;CLEAR FLAG ON SPOT
	LDA I,GREEN
	STA COLARY+HILT3
	JSR GTLIVES		;GET # OF LIVES
	LDA I,LVL1
	STA SHTWT		;6 SHIPS DON'T SHOOT
	LDA I,7F
	STA SHIELE+1		;NEW SHIELDS
	LDA I,20
	STA STDELAY		;WAIT A WHILE BEFORE FIRST TARGET
STRT2:	JSR MESGD		;LIVES,SCORE,HITS
	LAH SKILL1		;1ST TRACK
	STA TRKADH
	LAL SKILL1
	STA TRKADL
	.SBTTL	ATTRACT LOOP
WAIT:	LDA #HLT3
	STA HILIGHT		;RESTORE HILIGHT
	BIT STATE
	BMI WT
WT2JMP:	JMP WAIT2		;SKIP IT
WT:	BIT UPDFLG		;ARE WE CURRENTLY UPDATING INITIALS?
	BMI 2$			;NO
	JMP WAIT3		;YES
2$:
	LDA ATTIM	
	AND I,ATCON-1		;ATTRACT CHANGE?
	BNE CK2
	JSR CLRZRO		;CLEAR SCREEN
1$:	LSR SYNC		;WAIT FOR VBLANK
	BCC 1$
11$:	LSR SYNC		;WAIT FOR OPTION
	BCC 11$
	INC FRAMC		;DONT LEAVE 0
	INC ATTIM		;ONLY CLEAR ONCE
	LDA I,ATCON		;INITIALS?
	BIT ATTIM
	BNE 4$
	JSR GTLIVES		;SHOW # OF LIVES AT START
	JSR MESGD		;LIVES,SCORE, & HITS MESSAGES
	LDA $CMODE
	AND I,3
	CLC
	ADC #1			;BASE MESSAGE
	TAX
	JSR MESS		;COIN MESSAGE
				;EX PLAY MESSAGE
				;"BONUS LIFE FOR"
	LDA OPTION		;READ OPTION ON LEVEL
	AND I,BONLBT
	BEQ 3$
	LDX #6
	JSR MESS		;A IS SAVED
	LSR
	LSR
	LSR
	PHA			;SAVE COPY
	CLC
	ADC I,06		;BASE OF MESSAGES (-1 SO 0=NO FREEPLAY)
	TAX
	JSR MESS
	PLA
				;GET BONUS LEVEL
	TAX
	DEX
	LDA X,EXSCR
	STA BONLVL
3$:	JMP WAIT2
4$:	JSR MESGD		;MESSAGES LIVES, SCORE, (& HITS)
	LDA I,0C0		;POSITION NAME (START)
	STA MOBJVB		;SET OUTPUT PARAMETERS
	LDA I,0
	STA MOBVSB
	STA MOBSTB
	STA COLARY+MOTW
	LDA I,0FF
	STA MOBJHZ
	STA MOBJHB
	LDX I,T.OFF
	JSR MOTOUT		;OUTPUT 'TUBE CHASE'
	LDA I,30
	STA MOVS0		;VERTICAL POSITION (SIDE SCREEN) OF WORDS
CK2:	LDA I,ATCON
	BIT ATTIM		;WHAT ARE WE DOING?
	BNE OUTINT
	JMP WT2JMP		;INITIALS IF BIT NE, ELSE NORMAL ATTRACT
OUTINT:
	.SBTTL 	OUTPUT INITIALS
;
;OUTPUT INITIALS IN ATTRACT
;
	LDA I,WHITE
	STA COLARY+ALPHC	;CHARACTERS DURING INITIALS
	LDA I,GREEN
	STA COLARY+HILT3
	LDA I,0
	STA LIFETM		;RESET DURING ATTRACT
	LDX I,20
5$:	STA X,LINEH		;REMOVE SQUARES
	DEX
	BPL 5$
	STA LASERH
	STA LASERH+1		;REMOVER LASRERS
	LDA I,BLACK
	STA COLARY+MOTC		;BLACK BACKGROUND
	LDA FRAMC
	AND I,03
	BNE 8$
	LDA MOVS0
	CMP I,1			;SLIDE THROUGH MAGS
	BNE 6$
	LDA #0E0		;READ COMMENT BELOW
;THIS VALUE IS 0E0 FOR 'TUNNEL HUNT', IS 0D8 FOR
;'VERTIGO' AND IS 0D8 FOR 'TUBE CHASE'
	STA MOBJHB
	BNE 8$			;ALWAYS ******
6$:	DEC MOVS0
8$:	LDX #24.
	JSR MESS		;'HIGH SCORES'
	LDX I,0CF		;OUTPUT POINTER
	LDY I,3*5-1		;INPUT POINTER
10$:	STY R1			;SAVE PTR
	TXA
	PHA			;SAVE X
	LDX I,2
15$:	LDA Y,HSCORE		;FROM HIGH SCORE
	STA X,NUMB1
	DEY
	DEX
	BPL 15$
	JSR ASCAY		;CREATE ASCII
	PLA
	TAX			;RETRIEVE OUTPUT POINTER
	LDA I,30
	ORA HILIGHT
	STA X,ALPHA		;ADD EXTRA 0
	LDA HILIGHT
	STA X,ALPHA+1		;EXTRA BLANK BOXES
	STA X,ALPHA+2		;BETWEEN #'S & LETTERS
	DEX
	LDY I,5			;6 OUTPUT DIGITS
17$:	LDA Y,ASCI
	ORA HILIGHT		;OUTPUT TO SCREEN
	STA X,ALPHA
	DEX
	DEY
	BPL 17$
30$:	LDY R1
	TXA
	SEC
	SBC I,19		;POINT UP ONE LINE
	TAX
	DEY
	DEY			;NEXT INPUT
	DEY
	BPL 10$
;NOW DO INITIALS
	LDY I,3*5-3
	LDX I,0D2
40$:	LDA Y,INITL
	ORA HILIGHT
	STA X,ALPHA
	LDA Y,INITL+1
	ORA HILIGHT
	STA X,ALPHA+1
	LDA Y,INITL+2
	ORA HILIGHT
	STA X,ALPHA+2
	TXA
	SEC
	SBC I,20
	TAX
	DEY
	DEY
	DEY
	BPL 40$
	BMI WAIT3		;ALWAYS
WAIT2:	LDX I,0
	STX INDEX		;SET UP FOR ALL AVAILABLE
	JSR MOTION		;MOVE & SET UP FOR OUTPUT
	JSR SECTIONS		;DRAW CIRCLES
	JSR TARGET		;OUTPUT TARGET
	JSR MOTSET		;SET UP INTERRUPT VALUES
	JSR LASER		;DO LASER BLASTS
WAIT3:	JSR GETINT
	LDA OUT202
	STA STLED		;OUTPUT LAST FRAMES INFO
	BIT STATE		;NO SOUND IN ATTRACT
	BMI 10$
	AND #08			;STRETCH ON?
	BNE 5$
	LDA #WHITE
	STA COLARY+SHL11
5$:	LDA CH4BUF		;OUTPUT CH4 SOUNDS
	STA AUDC41
	LDA CH4BUF+1
	STA AUDF41
10$:	;OUT
	.PAGE
	.SBTTL SHIELDS
;FALL THROUGH FROM ABOVE
SLD:	LDA HILIGHT		;SAVE HILIGHT
	STA R5
	LDA I,HLT1
	STA HILIGHT
	LDA I,1			;EXPLOSION BIT
	BIT STATE
	BPL 1$			;NOT DURING ATTRACT
	JMP 20$
1$:	BEQ 2$			;NOT IF EXPLODING
	JMP SHOUT
2$:	LDX I,0			;GUESS NORMAL MESSAGE
	LDA SHIELE+1		;NOW MUCH ENERGY
	BNE 5$
	INX			;OUT
	BNE 6$			;ALWAYS
5$:	CMP I,30		;LOW LEVEL
	BCS 6$			;OK
	LDX I,2
6$:	LDA FRAMC
	AND I,10		;FLASH ALT MESSAGE RATE
	BNE 7$
	LDX I,0
7$:	LDA X,SCOL
	STA COLARY+HILT1
	LDA X,SMSG
	TAX
	JSR MESS
	LDY I,0			;NO SHIELD SOUND (GUESS)
	LDX I,0			;GUESS OFF
	BIT SHLD		;SHIELDS ON? (READ BUTTON)
	BMI 8$
	LDA SHIELE+1		;ANY ENERGY?
	BNE 71$			;OK
	LDA FRAMC		;MAKE SOUND IF NO ENETGY & BUTTON PUSHED
	AND I,8
	BNE 8$			;NO SOUND HERE
	LDA I,0AF
	STA CH4BUF		;VOLUME
	LDA I,30		;TONE
	STA CH4BUF+1
	BNE 8$			;***** ALWAYS *******
71$:	LDX I,80		;SHIELDS ON BIT
	LDY I,10
8$:	STX SHIELD		;SAVE STATE MASK
	STY AUDCT1
	LAH SHIPL		;BAR GRAPH LOCATION
	STA OUTPTR+1
	LAL SHIPL
	STA OUTPTR
10$:	LDA SHIELD
	BMI 14$			;SHIELDS ON
	LDA OUT202
	AND I,0E7		;TURN OFF COVER BITS (BOTH)
	STA OUT202
	LDA I,78		;SHLHB VALUE
	STA SHLHB
	LDX I,80		;SL0VSB VALUE
	LDY I,90		;GUESS AT SHL0VB VALUE
	BIT STATE
	BPL 15$			;OK IF GAME ON
	LDY I,0			;ELSE 0 IT
	BEQ 15$			;******ALWAYS*********
14$:	LDA SHICOL		;SHIELDS ON
	STA COLARY+SHL11	;SET COLOR
	LDA OUT202
	ORA #08			;TURN ON HSTRETCH BIT
	STA OUT202
	LDA SHIELE		;USE SOME ENERGY
	SEC
	SBC I,20		;USE AMOUNT OF ENERGY
	STA SHIELE
	BCS 16$
	DEC SHIELE+1
16$:	LDX #0			;VSTART C 0
	LDY I,0FF		;SHL0VB
15$:	STX SL0VSB
	STY SHL0VB
	LDA SHIELE+1		;GET ENERGY (JUST IN CASE YOU CAME FROM ABOVE)
	JSR GRAPH		;OUTPUT INDICATOR
20$:	LDA SHIELE+1		;GET ENERGY OF SHIELD
	EOR I,0FF		;CHANGE TO AN INCREASING NUMBER
	AND I,0F0		;USE TOP 4 BIT FOR INTENSITY
	ORA I,BLUE		;BLUE SHIELD ( A DIFFERENT TYPE OF INSURANCE)
	TAX
	LDA SHLDHT		;SHIELD HIT?
	BEQ 21$			;NO
	DEC SHLDHT
	BEQ SHOUT
	LDX I,RED		;COLOR OF OUTPUT
21$:	STX SHICOL		;EITHER 0 OR RED
SHOUT:	LDA R5
	STA HILIGHT		;RESTORE TO NORMAL HILIGHT
;PLACE HOLDER
	.PAGE
	.SBTTL POT LEGISLATION
;FALL THRU FROM ABOVE
;
;POT 0 IS LEFT/RIGHT
9$:	LSR PTWAIT
	BNE CRASH		;SKIP IF WE RESET
	LDX I,1			;UPDATE INFO ON BOTH POTS
1$:	LDA AX,PDATA		;GET DATA
	SEC
	SBC X,LOW		;GET BOTTOM OF RANGE
	BCS 10$			;IF POT-LOW <0?
	LDA I,0			;IF YES, POT=LOW AND
	DEC X,LOW		;LOW=LOW-1
10$:	CMP X,RANGE		;IS POT > RANGE?
	BCC 20$			;NO
	INC X,RANGE		;YES
	LDA X,RANGE
20$:	PHA			;SAVE NEW POT VALUE
	SEC
	SBC X,POTVAL
	BCS 25$			;TAKE ABS OF POT-OLDPOT
	EOR I,0FF
	ADC I,1			;NEGATE
25$:	CMP I,4			;IS POT ACTIVE
	PLA
	BCC 30$			;SEE IF CHANGE IS > 1
	INC X,ACTIVE		;INDICATE ACTIVE
	STA X,POTVAL		;STORE NEW VALUE
30$:	LDA FRAMC
	AND I,3F
	BNE 40$
	LDA X,ACTIVE
	CMP I,30.		;POT ACTIVE?
	BCC 40$
	BIT STATE		;DON'T COLLAPSE IN ATTRACT
	BMI 40$
	INC X,LOW
	DEC X,RANGE		;MOVE ENDS
	LDA I,0
	STA X,ACTIVE		;RESET COUNTER
40$:	BIT UPDFLG		;ARE WE DOING INITIALS?
	BPL 41$			;IF YES, WE NEED POT DATA STILL
	LDA I,0			;NO STEER ON ATTRACT
	BIT STATE
	BMI 45$
41$:	LDA X,RANGE		;CALCULATE LEFT/RIGHT
	LSR
	SEC
	SBC X,POTVAL
45$:	STA X,STEER
;POKEY SLIP FIX
	LDA X,RANGE
	CMP I,60		;RANGE TOO LARGE?
	BCC 46$
	DEC X,RANGE
	INC X,LOW		;MOVE ENDS IN IF YES
46$:	DEX
	BPL 1$
	BIT UPDFLG		;INITIALS?
	BMI CRASH		;IF NO, CONTINUE
	JMP MAIN		;ELSE DO NOTHING ELSE

	.PAGE
	.SBTTL COLLISIONS
	.SBTTL	HIT WALL SEQUENCE
CRASH:	BIT STATE
	BPL 99$
	JMP BOOM
99$:	LDA I,HLT3
	STA HILIGHT		;MAKE SURE NORMAL
	LAH HULPL
	STA OUTPTR+1		;HULL TEMP OUTPUT LOCATION
	LAL HULPL
	STA OUTPTR
	LDA HULL+1
	JSR GRAPH		;HULL TEMP GRAPH
	LDA I,LIMITC+HLT3
	STA HULPL+10
	LDX #26.		;"HULL TEMP" OR WARNING
	LDA FRAMC		;ALT MESSAGE FLASH
	AND I,10
	BNE 7$		
	LDA HULL+1
	CMP I,7F
	BCC 6$
	INC STATE		;SET EXPLOS BIT
6$:	CMP I,58
	BCC 7$
	LDX I,32.
	JSR MESS		;WARNING
	LDA I,0AF		;WARNING SOUND
	STA CH4BUF
	LDA I,50
	STA CH4BUF+1
	LDA I,RED
	STA COLARY+HILT3		;FLASH YELLOW
	BNE 8$			;**ALWAYS **
7$:	JSR MESS
	LDA I,GREEN
	STA COLARY+HILT3
8$:	LDA SMOKE		;SEQ IN PROGRESS?
	BNE 12$			;WELL THEN DON'T STOP PROGRESS
	LDA STATE		;CAN WE START PROGRESS?
	LSR			;BIT 2 HOLDS THE FUTURE (HITTING WALL)
	LSR
	BCC 70$			
;	SEC
	LDA HULL+1
	ADC I,07		;CARRY SET, ADD 8
	STA HULL+1
5$:	INC CRSHC
	LDA CRSHC
	AND I,03		;SLOW TOP SPEED?
	BNE 11$			;NO
	LDA TOPS
	SEC
	SBC I,1
	CMP I,04		;SLOW DOWN IF CRASHING
	BCC 11$
	STA  TOPS
11$:	LDA I,10		;SCAPE SOUND LENGTH
	STA SMOKE		;WHERE THERES SMOKE, THERES A PARTY!
	LDA I,087		;SCRAPE
	STA AUDC4		;SOUND
	LDA I,40
	STA AUDF4
;THE ABOVE COMMENTS ARE FOR THOSES OF YOU WHO ONLY REVIEW A PROGRAM
;BY READING THE COMMENTS !!!!
;SLOW DOWN IN COLLISION WITH WALL
12$:	DEC SMOKE
	BNE 50$
	LDA STATE		;CLEAR SCRAPE BIT
	AND I,0FD
	STA STATE
	LDA I,0			;SCRAPE SOUND OFF
	STA AUDC4
50$:	JMP BOOM
70$:	LDA FRAMC
	AND I,03
	BNE 50$
	LDA HULL+1		;DON'T DEC PAST 0
	BEQ 50$
	LDA HULL
	SEC
	SBC I,50
	STA HULL
	BCS 50$			;NO CARRY
	DEC HULL+1
;	BNE 50$			;FALL THROUGH
	.PAGE
	.SBTTL	EXPLODING ROUTINE
BOOM:	LDA SMOK2		;ALREADY EXPLODING
	BNE 12$
	LDA STATE		;EXPLODING?
	LSR
	BCC 50$			;NO
	LDX I,7
	LDA I,0
10$:	STA X,ZCNTRL		;REMOVE SQUARES
	DEX
	BPL 10$
	LDA I,ORGIN
	STA ORH
	STA VCENT+1
	LDX I,0
	JSR STSOUND		;EXPLOSION
	LDA I,70
	STA SMOK2
	STA STDELAY		;DELAY START OF NEXT SHIP
	LDA I,07F		;LONG STRAIGHT
	STA VDIST		;STRAIGHT TIME
	STA DIST
12$:	LDA I,0
	STA SHTBACK		;CLEAR SHELL FLAG
	STA VELH
	STA VELL		;HOLD VELOCITY TO 0
	STA CS			;NO CURVE
	STA VCS
	STA LIFETM		;RESET LIFE COUNTER
	STA TURNH
	STA SKCTL1		;TURN OFF TONES
	STA LASTIM		;NEW LASER IS COOL
	STA OBJST
	STA HULL
	STA HULL+1
	LDA COLARY+BKLCOL	;FLASH SCREEN
	CLC
	ADC I,1
	AND I,7
	STA COLARY+BKLCOL
	DEC SMOK2		;EXPLOSION LENGTH
	BNE 50$
	LDA I,BLACK		;IF EXPLOSON OVER...
	STA COLARY+BKLCOL	;RETURN TO BLACK
	DEC LIVES		;LOST A LIFE
	BNE 14$
	JMP GMOVR		;THAT'S ALL FOLKS
14$:	LDA STATE
	AND I,0FE		;REMOVE EXPLOSION BIT
	STA STATE
	LDA I,7F
	STA SHIELE+1		;NEW SHIELDS
	LDA I,03
	STA SKCTL1		;POKEY 1 BACK ON
	JSR MESGD		;DISLAY STATS
50$:
	.SBTTL	HIT VALUE REMOVAL
MVAL:	LDX I,14.+80		;MESSAGE 'VALUE:'
	LDA SCRTIM		;STILL DISPALYING MESSAGE?
	BEQ 30$			;IF 0, NO
	DEC SCRTIM
	BNE 30$			;NOT DONE YET
	JSR MESS		;REMOVE ALL THIS CAR
	LDA #0
	LDY I,05
5$:	STA X,ALPHA		;X=PTR FROM MESS
	INX
	DEY
	BPL 5$
	LDX I,10.+80
	JSR MESS		;REMOVE BONUS
	.SBTTL	BONUS SOUND & ATTRACT OUTPUT
30$:	LDX I,0		;GUESS SOUND OFF
	LDY I,0		; AND THIS TURNS IT OFF ALWAYS (ALMOST)
	LDA FRAMC
	AND I,8			;ALWAYS OFF EVERY 8 FRAMES...
	BNE 35$			;(IN CASE SHIELD OUT SOUND)
	LDA BONSND		;BONUS SOUND?
	BEQ MVALOT		;NO, DON'T OUTPUT ANYTHING
	LDY I,0AF		;DO BONUS SOUND
	LDX I,10
	DEC BONSND
35$:	STX CH4BUF+1		;PUT AWAY INTO BUFFER
	STY CH4BUF
MVALOT:;PLACE HOLDER
	.PAGE
	.SBTTL ADJUST VELOCITY
ADJVEL:	BIT STATE
	BMI 30$		;NOT DURING ATTRACT

;
;VELOCITY CONTROL & SOUNDS HERE
;
;	LDA I,10		;BREAK ON?
;	BIT RETRO		;STARNGE NAME FOR A BREAK!!!!
;	BNE 1$			;IT'S NOT ON (WHAT EVER IT IS??)
;	LDA FRAMC
;	AND I,07
;	BNE 1$
;	JSR SLOWDN		;SLOW DOWN AND THEN FALL THRU....
				;				...
				;				  ....
;1$:	LDY I,0
;	LDX I,0FA		;DECEL CONSTANT
;	LDA GAS
;	BMI 5$
;	LDX I,8			;ACCEL CONSTANT
;5$:	TXA
;	BPL 10$
;	DEY			;SIGN EXTEND
	LDY I,0
	LDA I,10		;THESE 2 LINES FOR ACCEL ALWAYS
	CLC
	ADC VELL		;ADD IN AMOUNT
	STA VELL
	TYA
	ADC VELH
	STA VELH
	CMP I,2			;MINIMUM SPEED
	BCS 20$			;CHECK TOO FAST
	LDA I,2
	STA VELL
	STA VELH		;DON'T LET IT GO TOO SLOW
	BNE 29$			;*ALWAYS*
20$:	CMP TOPS			;TOO FAST?
	BCC 29$			;NO
	LDA TOPS
	STA VELH		;LIMIT SPEED
29$:
	ASL			;SPEED X2
	EOR I,0FF		;NEGATE +1-1
	STA AUDF11
	SEC
	SBC I,01
	STA AUDF21
	LDA I,0A3
	STA AUDC11
	STA AUDC21
	LDA I,0
	STA AUDCT1
30$:	
	.PAGE
	.SBTTL TARGET POSITIONER
;
;THIS ROUTINE FINDS THE SQUARE CLOSEST TO THE TARGET
;AND THEN SETS A 'GOAL POSITION' IN 'OBJVT' & 'OBJHT'.
;THE ROUTINE THEN MOVES THE TARGET TOWARDS THIS 'GOAL'
;
XYZZY:	LDA I,0			;P IF NOT ACTIVE
	BIT OBJST
	BPL 23$
	LDA I,0FF
	STA R0			;INIT DISTANCE TO MAX
	LDX I,NOOBJTS-1		;CHECK DISTANCE
5$:	LDA X,ZCNTRL		;IF IN ACTIVE, SKIP
	BPL 20$
	SEC
	LDA DISTANCE
	SBC X,ZYAXH
	BCS 15$
	EOR I,0FF
	ADC I,1			;ABS VALUE OF DIFF
15$:	CMP R0			;CLOSER?
	BCS 20$
	STA R0			;SAVE WHICH & DISTANCE
	STX R1
20$:	DEX
	BPL 5$
	LDX R1			;GET THIS ELLIPSE
	JSR CENTER
22$:	LDA R0
	STA OBJHT		;H POSITION
	SEC
	SBC OBJH		;SCROLL TO NEW TARGET POSITION
	CMP I,80		;"ASR"
	ROR			;  "
	CMP I,80
	ROR
	CLC
	ADC OBJH		;SCROLL TO NEW POSITION AT 1/4 DISTANCE
23$:	STA OBJH
24$:	LDA X,UPDNH
	SEC
	STA OBJVT
	SBC OBJV		;SCROLL TO NEW V POSITION
	CMP I,80		;"ASR"
	ROR
	CMP I,80		;  "
	ROR
	CMP I,80
	ROR
	CLC
	ADC OBJV		;MOVE IN ON TARGET
	STA OBJV
30$:	JMP MAIN
	.SBTTL	CENTER OF SQUARE
;
;INPUT: X= SQUARE #
;OUTPUT: R0
;
CENTER:	LDA X,ZXAXRH		;GET MIDDLE OF IT
	CLC
	ADC X,ZXAXLH
	ROR			;TAKE HALF
	STA R0			;HOLD TEMP
	LDA X,ZCNTRR		;CHECK 9TH BIT
	LSR
	BCC 21$
	LDA I,7F		;ADD 80 (7F+CARRY)
	ADC R0			;ADD TO HALF DISTANCE (RECALL 80 = 0FF/2)
	STA R0
21$:	LDA X,ZCNTRL		;CHECK OTHER 9TH BIT
	LSR
	BCC 22$
	LDA R0
	SBC I,80		;SUBTRACT 80 IN OTHER DIRECTION.
	STA R0
22$:	RTS
	.PAGE
	.SBTTL GAME OVER
GMOVR:
	LDA I,80		;GAME OVER
	STA Z,STATE
	LDX I,0FF
	TXS			;RESTORE STACK
	JSR CLRZRO
	JSR UPDATE		;CHECK SCORES
	LDA I,0C8
	STA ATTIM		;DISPLAY HIGH SCORES
	JMP ATTRCT
	.PAGE
	.SBTTL	OUTPUT OF INFORMATION
	.SBTTL	LIVES, SCORE, & HITS MESSAGES
MESGD:	LDA I,HLT3
	STA R4			;DEFAULT HILIGHT
	STA HILIGHT		;DEFAULT (ALWAYS)
	LDX #12.			;WRITE 'SCORE'
	JSR MESS
				;YES IF --
	BIT UPDFLG		;DOING INITIAL INPUT?
	BPL 51$			;IF YES...SKIP NEXT
	BIT STATE		;GAME PLAY?
	BPL 51$			;SKIP ATARI MESSAGE
	LDX #80
	STX SECBIT		;SECURITY
	LDX #31.			;DO ATARI MESSAGE
	JSR MESS
	LDX #30.
	JSR MESS
	LDX #0
	STX SECBIT		;TURN OFF SECURITY
	.SBTTL	DISPLAY LIVES/CREDIT
51$:	LDX #13.		;GUESS LIVES
	BIT STATE		;GAME?
	BPL 52$			;YES
	LDA $$CRDT
	ORA $CNCT		;ANY COINS OR CREDITS?
	BEQ 52$			;NO
	LDA $$CRDT		;GET CREDITS
	STA LIVES		;YES - SO XFR CREDIT TO LIVES FOR DISPLAY
	LDA #HLT2
	STA R4			;SAVE HILIGHT
	STA HILIGHT		;CHANGE HILIGHT
	LDX #29.			;CHANGE TO CREDIT
52$:
	JSR MESS
	LDA R4			;BLANK BOXES
	STA GTMPL-1
	STA GTMPL
	STA GTMPL+1
	STA GTMPL+4
	STA GTMPL+5
	BIT STATE		;GAME PLAY?
	BPL 61$			;IF YES, WE DON'T CARE ABOUT CREDITS!
	LDX $$CRDT
	BNE 7$
61$:	STA GTMPL+3
7$:	LDX #0
	LDY LIVES
	JSR DECIMAL
	JSR ASCAY		;CONVERT
	LDY #0
	LDX #0
	STX R5			;0 BLANK FLAG
53$:	LDA Y,ASCI+4
	BIT R5
	BMI 55$			;GO OUTPUT 0
	CMP #30			;IS THIS A 0
	BEQ 57$			;YES 50 SKIP
55$:	ORA R4			;PUT IN HILIGHT
	STA X,GTMPL+2
	STA R5
	INX			;NEXT OUTPUT LOCATION
57$:	INY			;NEXT INPUT
	LDA LIVES		;NEED A SINGLE 0?
	ORA $$CRDT
	ORA $CNCT
	BNE 59$
	DEC R5			;YES (SPECIAL CASE)
59$:	CPY #2			;DO 2 DIGITS
	BNE 53$
	BIT STATE		;GAME?
	BPL 65$
	LDA $CNCT		;ANY HALF CREDITS
	BEQ 58$			;NO
	LDA #HALF
58$:	ORA R4
	STA X,GTMPL+2
60$:	LDA #ATCON		;INITIALS
	AND ATTIM
	BNE DSPTM2		;NOT DURING INITIALS
65$:	LDA #HLT3
	STA HILIGHT
	LDX #11.
	JSR MESS		;HITS'
				;FALL THROUGH
				;USUALLY HILIGHT 3
DSPTM2:	LDX I,2
15$:	LDA X,SCOREH
	STA X,NUMB1
	DEX
	BPL 15$			;MOVE INPUT FOR CONVERSION
	JSR ASCAY
	LDX I,5
17$:	LDA X,ASCI
	ORA I,HLT3		;ALWAYS HILIGHT 3
	STA X,SCPL
	DEX
	BPL 17$			;OUTPUT
	LDA I,30
	ORA I,HLT3		;ALWAYS HILIGHT 3
	STA SCPL+6		;EXTRA 0
	LDA #HLT3
	STA SCPL+7		;EXTRA BOX
	STA SCPL-1
	BIT STATE		;GAME ON?
	BPL 19$			;IF YES, OUTPUT
	LDA I,ATCON
	BIT ATTIM		;IF ATTRACT, NOT DURING INITIALS
	BNE 20$
19$:	LDA I,0
	STA NUMB1		;MOVE
	LDA HITS
	STA NUMB2
	LDA HITS+1
	STA NUMB3
	JSR ASCAY
	LDX I,2			;3 DIGITS
18$:	LDA X,ASCI+3
	ORA I,HLT3		;ALWAYS HILIGHT 3
	STA X,HTPL+ALPHA
	DEX
	BPL 18$
	LDA I,HLT3		;ALWAYS USE HILIGHT 3
	STA HTPL-1+ALPHA
	STA HTPL-2+ALPHA
	STA HTPL+3+ALPHA
20$:	RTS
	.SBTTL	GET LIVES
GTLIVES:	LDA READY
	BNE GTLIVES		;WAIT FOR GOOD DATA
	LDA OPTION
	CLC
	AND I,3
	ADC I,2			;2 TO 5 LIVES
	STA LIVES
	RTS
	.PAGE
	.SBTTL	SLOW DOWN ROUTINE
SLOWDN:	LDA VELL
	STA R1
	LDA VELH		;GET 2 BYTE VELOCITY
	CMP I,80		;1/2
	ROR
	ROR R1
	CMP I,80
	ROR
	ROR R1			;1/4
	CMP I,80
	ROR
	ROR R1			;1/8 OF VELOCITY
	TAY			;SAVE MSB
	SEC
	LDA VELL
	SEC
	SBC R1			;DECREMENT VELOCITY BY 1/8
	STA VELL
	TYA			;VELH - Y (MSB'S)
	EOR I,0FF		;THE CARRY IS CORRECT FROM THE SUBTRACT
	ADC VELH
	STA VELH
	RTS			;THAT'S ALL
	.PAGE
	.SBTTL CHECK FOR HIGH SCORE UPDATE
UPDATE:	
	LDA I,-1
	STA UPDFLG		;RESET FLAG
	LDY I,0			;INDEX INTO HIGH SCORE TABLE
20$:	LDA Y,HSCORE
	CMP SCOREH
	BCC 30$
	BNE 25$			;NOT SAME
	LDA Y,HSCORE+1
	CMP SCOREM
	BCC 30$			;NEW HIGH SCORE
	BNE 25$			;NOT GOOD ENOUGH
	LDA Y,HSCORE+2		;IF MSB'S ARE THE SAME
	CMP SCOREL		;... CHECK LSB'S
	BCC 30$			;GOT ONE
25$:	INY
	INY
	INY
	CPY I,3*5		;CHECK AN 5 SCORES
	BCC 20$
90$:	RTS			;NO OTHER NEEDED NOW
30$:	STY R6			;SAVE TARGET LOCATION
	STY UPDFLG		;POINT TO INITIALS LOCATION
	LDX I,3*5-3		;POINTER FOR MOVE
	LDY I,3*5-6
35$:	CPX R6
	BEQ 45$			;END OF COPY
	LDA Y,HSCORE
	STA X,HSCORE
	LDA Y,HSCORE+1
	STA X,HSCORE+1		;MOVE DOWN
	LDA Y,HSCORE+2
	STA X,HSCORE+2
	LDA Y,INITL		;MOVE INITIALS
	STA X,INITL
	LDA Y,INITL+1
	STA X,INITL+1
	LDA Y,INITL+2
	STA X,INITL+2
	DEY
	DEY
	DEY
	DEX
	DEX
	DEX
	BNE 35$			;LOOP UNTIL Y=0 OR DONE
45$:	LDA I,01		;START LETTERS AT A
	STA X,INITL
	LDA I,0
	STA X,INITL+1
	STA X,INITL+2
	STA UPDINT
	STA SHDB		;INIT SWITCH TO ALREADY PUSHED
	LDY R6
	LDA SCOREH
	STA Y,HSCORE
	LDA SCOREM		;MOVE IN NEW SCORES
	STA Y,HSCORE+1
	LDA SCOREL
	STA Y,HSCORE+2
;
;GET INITIALS
;
	.SBTTL	 GET INITIALS
;CALLED 1 TIME A FRAME
; UPDFLG IS A POINTER TO THE 1 OF 5 INITAL BLOCKS
;TO BE UPDATED. UPDINT IS A 0 TO 2 COUNTER TO POINT
;TO THE 1 OF 3 INITIALS BEING UPDATED IN THIS BLOCK.
;SWSTAT IS USED TO DETECT THE POSITIVE GOING TRANSITION
;ON THE FIRE SWITCH.
;UPD IS THE CALCULATED UP/DOWN POT VALUE USED TO SELECT
;THE CORRECT INITIAL.
;
GETINT:	LDA UPDFLG			;ARE WE UPDATING?
	BPL 10$			;YES
5$:	RTS
10$:
	LDA I,0			;REMOVE SHELL
	STA SHL0VB
	STA LASERH+1
	STA LASERH
	LDA I,HLT3
	STA HILIGHT
	LDA I,BLUE
	STA COLARY+ALPHC	;RED LETTERS FOR INITIALS
	LDA I,ORANGE
	STA COLARY+HILT3
	LDA I,WHITE
	STA COLARY+HILT1	;WHITE SELECT
				;MESSAGES
	LDX #22.
	JSR MESS
	LDX #23.
	JSR MESS
	JSR MESGD		;OUTPUT INFO
	LDX I,0			;NO ADD
	LDA FRAMC
	BNE 11$
	BIT ATTIM
	BPL 30$			;DONE
11$:	AND I,0F		;LETTER UPDATE TIME
	BNE 16$			;NOT TIME TO COUNT
	LDX I,1			;GUESS A + COUNT
	LDA STEER		;+ OR - ?
	BPL 15$
	LDX I,-1
	EOR I,0FF
	CLC
	ADC I,0			;ABS VALUE OF DIFFERENCE
15$:	AND I,0F0		;A PLACE WITH NO CHANGE
	BEQ 20$			;NONE CLOSE TO CENTER
16$:	CLC
	LDA UPDINT
	ADC UPDFLG		;CREATE THE POINTER TO CURRENT INITIAL
	TAY			;IN Y
	CLC
	TXA
	ADC Y,INITL		;ADD CHANGE TO CURRENT INITIAL
	BPL 17$
	LDA I,26.		;IF UNDER 0, WRAP TO 26. (Z)
17$:	CMP I,27.		;DID WE PASS Z?
	BCC 18$			;NOPE
	LDA I,0			;IF YES WRAP TO 0. (BALNK) ... MOD 26 ...
18$:	STA Y,INITL
	LDX UPDINT
	STA INTTEM		;SAVE FOR LATER
	ORA I,40		;WHITE BACKROUND
	STA X,ALPHA+0D		;OUTPUT TO SCREEN
20$:	LDA SHLD		;ENTER INITIAL?
	BPL 21$
	STA SHDB
	RTS			;INIT SWSTAT AND RETURN
21$:	EOR SHDB		;+ EDGE?
	BPL 35$			;NO CHANGE
	EOR SHDB		;GET NEW STATUS
	STA SHDB		;SAVE
	LDA INTTEM		;CHANGE COLOR
	ORA HILIGHT
	STA X,ALPHA+0D
	INC UPDINT		;INITIAL OK. POINT TO NEXT
	LDX UPDINT
	CPX I,3			;DONE WITH ALL 3?
	BEQ 30$			;YES
	LDA I,0F0		;1 MINUTES
	STA ATTIM		;RESET
	LDA I,01		;SET TO A TO START
	STA Y,INITL+1		;SET TO 'A'
	BNE 35$			;********ALWAYS***********
30$:	LDA I,-1		;SET UPDFLG TO -1 TO SHOW DONE
	STA UPDFLG
	LDA I,ATCON
	STA ATTIM
	JSR CLRZRO
35$:	RTS
	.PAGE
	.SBTTL HEX TO DECIMAL CONVERT
;
;	CONVERTS HEX INTO DECIMAL - 2 BYTE HEX IN X & Y
;	RESULT IN NUMB3,NUMB2,NUMB1
;
;	ROUTINE FOR FAST 16-BIT BINARY TO 6 DIGIT CONVERSION
;	INPUT:	X=MSB'S, Y=LSB'S
;	OUTOUT:	A=LSD'S, X=MIDDLE, Y=MSD'S
;	774. CYCLES WORST (AND BEST) CASE FOR 16. BITS
;
DECIMAL:STY R0		;R0+1,R0=BINARY WORD
	LDY I,15.		;BIT COUNT
DECCNV:	STX R0+1
	LDA I,0
	STA NUMB1		;CLR DECIMAL BYTES
	STA NUMB2
	STA NUMB3
	SED			;SET DECIMAL MODE
10$:	ASL R0
	ROL R0+1		;SHIFT A BIT OUT OF THE BINARY WORD
	LDA NUMB3
	ADC NUMB3
	STA NUMB3		;AND ADD INTO DECIMAL BYTES
	LDA NUMB2
	ADC NUMB2
	STA NUMB2
	LDA NUMB1
	ADC NUMB1
	STA NUMB1
	DEY
	BPL 10$
	LDY NUMB1
	LDX NUMB2
	LDA NUMB3
	CLD			;CLEAR DECIMAL FLAG
	RTS
	.PAGE
	.SBTTL	BCD TO ASCII LEADING 0 BALNKING (3 TO 6)
;
;INPUT: NUMB1,NUMB2,NUMB3 (MSB TO LSB)
;OUTPUT: ASC1,ASC2,...,ASC6 (MSB TO LSB)
;
;CLOBBERS A,X,Y;  CHANGES 0 PAGE AS SHOWN;  NO STACK
;
ASCAY:	LDA I,2
	STA R2			;DIGIT COUNT
	LDA I,0
	LDX I,5
10$:	STA X,ASCI		;INIT TO NOTHING
	DEX
	BPL 10$
	INX			;X=0
	CLC			;INIT BLANK FLAG
	LDY I,0			;OUTPUT POINTER
14$:	LDA X,NUMB1
	AND I,0F0		;MSB NIBBLE
	BNE 15$			;0?
	BCC 20$			;IF 0, 0 BALNK?
15$:	LSR
	LSR
	LSR
	LSR
	ORA I,30
	STA Y,ASCI
	SEC			;SET NO MORE BLANKING FLAG
20$:	LDA X,NUMB1		;GET INPUT AGAIN
	AND I,0F		;BOTTOM NIBBLE
	BNE 25$			;NOT 0
	BCC 30$			; IS 0, BLANKING?
25$:	ORA I,30		;ASCII
	STA Y,ASCI+1
	SEC			;SET FLAG
30$:	INY
	INY			;NEXT OUTPUT
	INX
	DEC R2			;ANOTHER DONE
	BNE 35$			;LAST OCCURENCE?
	SEC			;IF YES, MUST HAVE 2 0'S
35$:	BPL 14$
	RTS
	.BYTE 07		;CKSUM2
	.SBTTL	(CK2)
	.PAGE
	.SBTTL LASER CONTROL ROUTINES
	.SBTTL	MOTION & PICTURE CONTROL
;
;LASER CONTROL ROUTINE
;2 LASERS AVAILABLE. ONE FIRES FROM THE LEFT SIDE, THE OTHER FROM
;THE RIGHT.
;LASTT:STATUS (80 ACTIVE); LASERV: VERTICAL POSITIONS, LASERH: HORIZ POSITIONS
;LASERD=DISTANCE AWAY
;LASER=IX=0 IS ON RIGHT (IN MIRROR)
;
;
LASER:	LDA HILIGHT		;SAVE CURRENT HILIGHT
	STA R5
	LDA I,HLT2
	STA HILIGHT
	LDX I,0			;BEEP ON OVERHEAT
	LDA HOTDLY		;OVERHEATED?
	BMI 6$			;YES-DO NORMAL OVERHEAT
	LDA LASTIM		;WARNING NECESSARY?
	CMP I,48
	BCC 5$			;NO WARNING NEEDED
	LDX I,0AF		;WARM SOUND
	LDY I,20
	CMP I,60
	BCC 7$
	LDY I,10
	BNE 7$			;***ALWAYS***
6$:	LDX I,0AF		;SOUND OF OVERHEAT
	LDY I,08		;NORMAL BEEP FOR OVERHEAT
7$:	LDA I,04
	AND FRAMC
	BNE 5$
	TAX			;IF OFF, OK
5$:	BIT STATE		;ATTRACT?
	BPL 8$
	LDX I,0			;NO SOUND
8$:	STX AUDC31
	STY AUDF31
	LDA FRAMC
	AND I,3			;COOL DOWN RATE
	BNE 1$
	LDA LASTIM		;'TEMPATURE'
	BEQ 1$			; NOT PAST 0
	DEC LASTIM
1$:	BIT STATE
	BMI 4$			;NO MESSAGE IN ATTRACT
	LDA LASTIM
	LDX I,0			;GUESS 'READY' MESSAGE
	CMP I,48		;WHAT TEMP?
	BCS 2$			;ABOVE READY
	LDA I,0			;ITS DOWN TO READY ...
	STA HOTDLY		;JUST IN CASE YOU WERE WAITING FOR IT TO COOL
	BEQ 3$			;******** ALWAYS ***********
2$:	INX			;GUESS 'WARNING' NOW
	CMP I,78		;TO HOT TEMP LEVEL
	BCC 3$
	LDA I,80		;IT OVERHEATED SO ...
	INX			;'OVERHEATED'
	STA HOTDLY		;TURN OFF FOR A WHILE
	TXA
	PHA			;SAVE INDEX TO MESSAGE
	PLA
	TAX			;RESTORE MESSAGE  POINTER
3$:	LDA HOTDLY		;TEMP STATUS
	BPL 31$
	LDX I,2			;STAY 'OVERHEATED' UNTILL 'READY'
31$:	TXA
	PHA			;SAVE STATUS FOR LATER
	LDA FRAMC
	AND I,10
	BNE 32$
	LDX I,0			;FLASH W/ ALT MESSAGE (IF ANY)
32$:	LDA X,LMSG		;GET PROPER MESSAGE NUMBER
	TAX
	JSR MESS
	PLA	
	TAX			;GET BACK STATUS
	LDA X,HCOL		;GET COLOR
	STA COLARY+HILT2
4$:	LDX I,1			;CHECK BOTH LASERS
NEXTL:	STX R3			;SAVE FOR LATER
	LDA X,LASTT		;ACTIVE
	BMI 50$			;IF YES, MOVE IT ALONG
	BIT SHIELD		;SHIELD ON?
	BMI 7$			;NO SHOT IF YES
	LDA I,1			;EXPLODING
	BIT STATE		;GAME ACTIVE?
	BMI 10$			;NO
	BNE 10$
	CPX NXTLAS		;THIS ONES TURN
	BNE 7$			;A 'LONG CUT' TO 90$
	ROL FLAST		;CARRY = LAST STATUS OF FIRE BUTTON
	LDA FIRE
	STA FLAST		;READ SWITCH AND SAVE IN FLAST
	BMI 5$			;NOT PUSHED
	BCC 90$			;WAS PUSHED LAST TIME
	BIT HOTDLY		;TO HOT TO SHOOT?
5$:	BMI 90$			;YES
6$:
	LDX I,1
	JSR STSOUND		;PHASER SOUND
	LDX R3			;RESTORE IX
	LDA LASTIM		;HEAT
	ADC I,0B
	BMI 61$			;DON'T GO OVER 88
	STA LASTIM		;+10 (+?1)
61$:	LDA I,80
	STA X,LASTT
	TXA
	EOR I,1
	STA NXTLAS		;SWAP NEXT START
	LDA I,08
	STA X,LASERV		;V STARTS AT 0
	LDA I,0FF
	STA X,LASERD		;0FF IS AT YOUR NOSE
	STA X,LASERH		;GUESS LASER 1(STARTS AT 8,FF)(H,V)
	TXA			;LASER 1?
7$:	BNE 90$			;YES, SO POSITION OK
	LDA I,1A
	STA X,LASERH		;ELSE STORE OUT (1A,8)(H,V)
	BNE 90$			;***ALWAYS***
;ATTRACT MODE SHOOT
10$:	LDA OBJST		;ACTIVE OBJECT?
	BPL 90$			;NOPE!!
	SEC
	LDA OBSPD
	SBC VELH		;MOVING AWAY?
	BCS 90$			;YES. DON'T SHOOT
	LDA DISTANCE		;GAME IN ATTRACT, MUST FIRE AUTO
	CMP I,0B0		;HOW FAR AWAY IS SHIP
	BCS 6$
	BCC 90$			;DO NEXT LASER ***ALWAYS***
50$:	LDA X,LASERD		;LASER ACTIVE SO MOVE ALONG
	LSR
	LSR
	LSR
	LSR
	LSR			;SPEED IS TOP NIBBLE
	TAY			;SAVE A FOR LATER
	EOR I,0FF
	CLC
	ADC I,1			;NEGATE SPEED TO 'ADD' TO V POSIT
	PHA			;SAVE FOR LATER
	PHA
	TYA
	CLC
	ADC X,LASERV		;CARRY STILL CLEAR
	STA X,LASERV
	CPX I,1			;LASER 1
	BEQ 55$
	PLA			;DESTROY OLD PUSHED VALUE
	TYA			;GET BACK + SPEEED FOR LASER # 0
	PHA			;PUT BACK THIS ONE FOR BELOW
55$:	PLA			;GET VALUE TO ADD
	CLC
	ADC X,LASERH
	STA X,LASERH
	PLA			;GET BACK + SPEED
	CLC
	ADC X,LASERD
	STA X,LASERD		;NEW DISTANCE
	BMI COLT			;IF-, STILL MOVING
	LDA I,0			;AT END, DEACTICATE IT.
	STA X,LASERH
	STA X,LASERV
	STA X,LASERD
	STA X,LASTT
90$:
ESCAPE:	LDX R3			;RECALL OLD X
	DEX
	BMI 99$
	JMP NEXTL
99$:				;FALL THROUGH
	.SBTTL	BAR GRAPH OUTPUT LASER TEMP
BARS:	BIT STATE		;ATTRACT?
	BMI 25$			;IF YES, SKIP
	LAH LASPL
	STA OUTPTR+1		;OUTPUT LOCATION
	LAL LASPL
	STA OUTPTR
	LDA LASTIM
	JSR GRAPH
	LDA I,LIMITC+HLT2
	STA LASPL+10		;LIMIT CHAR
25$:	LDA R5
	STA HILIGHT		;NORMAL HILIGHT
	RTS
	.PAGE
	.SBTTL	COLLISION CHECK(MO)
;
;COLLISION CHECK
;
COLT:	BIT OBJST		;STATUS OF OBJECT
	BPL ESCAPE		;NOT ACTIVE
	BVS ESCAPE		;ALREADY EXPLODING
	CLC
	LDA HOFF
	ADC I,8			;A BIT MOR LIBERAL
	STA R1
	LDA X,LASERV		;VERT OF LASER
	EOR I,0FF		;RUNS WRONG WAY
	SEC
	SBC OBJV		;DIFFERENCE
	BCS 10$
	EOR I,0FF
	ADC I,1			;ABS VALUE
10$:	CMP VOFF
	BEQ 11$
	BCS ESCAPE		;NOT WITHIN VERTICAL
11$:	LDA X,LASERH
	SEC
	SBC OBJH		;H DIFF
	BCS 20$
	EOR I,0FF
	ADC I,1			;ABS VALUE
20$:	CMP R1
	BEQ 21$
	BCS ESCAPE
21$:	LDA X,LASERD		;DISTANCE
	CMP I,90
	BCS ESCAPE
;OBJECT HIT
;
	LDA I,40		;SET HIT BIT
	ORA OBJST
	STA OBJST
	LDA A,TARTBL+1		;MOVE TO EXPLOSION SEQUENCE
	STA OBJPIC
	LDA I,0
	STA X,LASTT		;TURN OFF LASER
	STA X,LASERH

	.SBTTL UPDATE SCORE
;POINTS BASED ON VELOCITY AT TIME OF HITS & SIZE OF OBJECT
	STA R1
	LDA DISTANCE
	EOR I,0FF		;NEGATE QUANTITY
	LSR
	LSR
	ADC VELH		;ADD IN VELOCITY
	STA R0
	STA R2
	BCC 25$			;ANY CARRY?
	INC R1			;TAKE CARE OF THAT!!
25$:	LDX BONMUL		;BONUS
	BEQ 27$
26$:	CLC
	LDA R2
	ADC R0
	STA R0
	BCC 22$
	INC R1
22$:	DEX
	BNE 26$
27$:	LDY R0
	LDX R1			;RESTORE A & X
	JSR DECIMAL
	LDX I,20
	LDA HITS		;> 100?
	BNE 23$
	LDA HITS+1
	CMP I,LVL4		;> 35?
	BCC 24$
23$:	LDX I,1			;NO DELAY IF YES
24$:	STX STDELAY
	SED
	BIT STATE		;ATTRACT
	BMI 30$
	CLC
	LDA HITS+1
	ADC I,1
	STA HITS+1
	LDA HITS
	ADC I,0
	STA HITS
	LDA HITS+1
	LDY I,1			; SKILL 1
	CMP I,LVL2		;IF LESS THAN 15, STILL 0
	BCC 29$
	CMP I,LVL3		;15-25 SKILL 1
	BCC 28$
	INY			;ABOVE 25 SKILL 2
	LDA I,80
	STA SHTWT		;ALWAYS SHOOT
28$:	STY SKILL
29$:	CLC
30$:	LDA NUMB1		;SCORE AMOUNT=SPEED +....
	STA SCRREG		;PUT AT OUTPUT LOCATION & HOLD REG
	LDA NUMB2		;CARRY
	STA SCRREG+1
	LDA NUMB3
	STA SCRREG+2
	BIT STATE		;NO SCOR DURING ATTRACT
	BPL 31$
	JMP 50$
31$:	CLC
	LDA SCRREG+2
	ADC SCOREL
	STA SCOREL
	LDA SCRREG+1
	ADC SCOREM
	STA SCOREM
	LDA SCRREG
	ADC SCOREH
	STA SCOREH
	BEQ 40$			;NO 100 THOUSANDS
	LDA OPTION		;BONUS ALLOWED?
	AND #BONLBT
	BEQ 48$			;NO BONUS ALLOWD
	BIT STATE		;100K BONUS REACHED?
	BVS 48$			;YES
	LDA I,40		;NO-GIVE BONUS
	BNE 47$			;SET FLAG
40$:	LDA BONLVL		;GET LEVEL
	BEQ 48$			;NO BONUS
	CMP SCOREM		;REACHED?
	BEQ 44$			;JUST HIT IT
	BCS 48$			;NOT YET
44$:	LDA #08			;SET SCORE REACHED
	BIT STATE		;ALREADY SET?
	BNE 48$			;YEP
47$:	ORA STATE
	STA STATE
	INC LIVES		;GOT ONE
	LDX #10.		;BONUS MESSAGE
	JSR MESS
	LDA I,30
	STA BONSND		;BONUS SOUND
48$:	CLD
	LDA TOPS		;NEW TOP SPEED
	CLC
	ADC I,2
	BMI 49$			;TOP SPEED=7E
	STA TOPS
49$:	LDX I,0
	JSR STSOUND		;EXPLOSION
	.SBTTL	DISPLAY HIT VALUE
	LDA I,90
	STA SCRTIM		;DISPLAY TIME
	JSR MESGD		;DISPLAY STATS
	LDX #14.
	JSR MESS		;'VALUE'
	TXA
	PHA			;SAVE X
	LDX I,2
41$:	LDA X,SCRREG		;GET #'S FOR OUTPUT CONVERSION
	STA X,NUMB1
	DEX
	BPL 41$
	JSR ASCAY		;CONVERT TO ASCII
	PLA			;RESTORE Y
	TAY
	LDX I,-6		;5 DIGITS
42$:	LDA X,ASCI+6	
	BEQ 43$			;LEFT JUSTIFY VALUE
	ORA HILIGHT
	STA Y,ALPHA
	INY
43$:	INX
	BMI 42$
	LDA I,30
	ORA HILIGHT
	STA Y,ALPHA		;EXTRA 0
50$:	CLD			;TO BE SURE
	JMP ESCAPE		;GO DO NEXT LASER BOLT
	.PAGE
	.SBTTL COLOR CHANGE & UPDATE
;
;COLOR CHANGE SUBROUTINE
;USED FOR BOTH NEXT COLOR OF TUBE AND
;CHANGING COLOR OF WORD TUBE CHASE
;
;'A'=COLOR TO BE UPDATED
;'A'=NEW COLOR/SHADE (ALSO IN R0)
;
;BLITZES A & Y UPDATED ZERO PAGE 'DIR' IF NECESSARY
;
;NO STACK USED
;
;
COLCHG:	STY R2			;SAVE DIRECTION
	SEC
	BIT R2			;INTENSITY UP OR DONW
	BPL 10$			;UP
	ADC I,0F		;DOWN ADD 10 (CARRY SET)
	STA R1
	CMP I,0C0		;> F0 ?
	BCC 20$
	CLC
	ADC I,1			;CHANCE COLOR
	EOR R1			;IF THIS SEEMS WEIRD, ASK MIKE ALBAUGH
	AND I,0F		
	EOR R1
	STA R1
5$:	LDA I,0FF
	EOR R2			;CHANGE DIRECTION OF CHANGE
	STA R2
	JMP 20$
10$:	SBC I,10		;SUBTRACT 10 (CARRY SET)
	STA R1
	CMP I,70		;MAXIMUM BRITHTNESS?
	BCC 5$			;CHANCE DIRECTIONS
20$:	LDY R2
	LDA R1			;NEW COLOR IN A
	RTS
	.SBTTL FLASH ON EXPLOSION
;
;FLASH COLOR OF MOTION OBJECT ON EXPLOSION
;
;BLITZES 'A' & CHANGES COLARY EXTRIES
;
;2 BYTE STACK USED
;
FLASH:	LDA COLARY+MOTW
	JSR CONLY
	STA COLARY+MOTW
	LDA COLARY+MOTD
	JSR CONLY
	STA COLARY+MOTD
	LDA COLARY+MOTG
	JSR CONLY
	STA COLARY+MOTG
	RTS
;
;SUBROUTINE USED ABOVE,CHANGES COLOR ONLY FOR FLASH EFFECT
;
CONLY:	CLC
	ADC I,01		;+1 MOD 7 TO A
	AND I,07
	RTS
	.PAGE
	.SBTTL BAR GRAPH CALCULATION
;
;INPUT A # BETWEEN 0 & 80. THIS ROUTINE WILL RETURN
;THE NUMBER OF WHOLE SEGMENTS & THE SIZE (0-7) OF A PARTIAL
;SEGMENT
;
;INPUT =A. OUTPUT: Y=WHOLE SEGMENTS, X=PARTIAL
;
;BLITES A & Y & X, NO STACK
;
GRAPH:	STA R6
	AND I,07		;REMINDER 0-7
	TAX
	LDA R6
	LSR
	LSR
	LSR
	TAY
	.SBTTL	OUTPUT GRAPH ROUTINE
	STY R6			;SAVE Y
	BEQ 15$			;NO WHOLE SEGMENTS
	LDA I,GRPIC0+7		;WHOLE SEGMENTS
	ORA HILIGHT
10$:	STA NY,OUTPTR		;OUTPUT SEGMENTS
	DEY
	BNE 10$
15$:	LDY R6			;GET BACK LAST PLACE
	TXA
	CLC
	ADC I,GRPIC0-1		;BOTTOM OF PARTICAL PICTURE
	INY
	ORA HILIGHT
	STA NY,OUTPTR
	INY
	LDA HILIGHT		;FILL W/BLANK TO END OF BAR
20$:	CPY I,19.		;MAX # OF PLACES
	BCS 25$			;QUIT IF=OR OVER
	STA NY,OUTPTR
	INY
	BNE 20$			;*ALWAYS*
25$:	RTS
	.PAGE
	.SBTTL INITIALIZATION

CLR2:	LDX I,ZHI2
	BNE CLR
CLRZRO:	LDX I,ZHI		;BYTE COUNT
	BNE CLR
CLRALL:	LDX I,0F8		;CLEAR ALL (LEAVE STACK SPACE)
CLR:	LDA I,0
10$:	STA ZX,0		;CLEAR PAGE ZERO
	STA X,PAGE2		;& PAGE 2
	STA X,PAGE1
	DEX
	BNE 10$
	STA ZX,0		;LAST EXTRA PLACE

	STA X,PAGE1
	.SBTTL	TUBE INIT
	LDA I,ORGIN
	STA Z,ORH
	.SBTTL	HARDWARE INIT
INIT:
;
;INIT HARDWARE
	LDX I,15.
5$:	LDA X,COLINT		;INIT COLOR ARRAY TO START COLORS
	STA X,COLARY		;PUT IN RAM
	LDA I,0
	STA X,POKEY		;SOUND CHANNLES OFF
	STA X,POKEY1
	DEX
	BPL 5$
	LDX I,2A
;	LDA I,0			;A=0 FROM ABOVE
6$:	STA X,LINEV+SQUARE	;ALL OTHER LINES OFF SCREEN
	STA X,LINEH-2		;0 LINES & "SHELL" HSTART
	DEX
	BPL 6$
	STA Z,ORL		;CENTER ORIGIN
	STA Z,ORVH		;VERT ORIGIN
	STA MOBSTB		;SET MOTION OBJ RAM POINTER TO 0
	STA MOBSC0
	STA MOBSC1
	STA DIR			;DIRECTION OF COLOR CHANGE IS UP
	STA SHIELD		;SHIELDS OFF
	TAX			;X=0
7$:	STA X,ALPHA		;CLEAR ALPHA
	DEX
	BNE 7$			;UNTIL X =0 AGAIN
;INIT BACKROUND LINE
;	LDA I,0			;A=0 FROM ABOVE
	STA LINEVS+BACKROUND
	STA LINESH+BACKROUND
	STA SHL0VB		;REMOVE SHELLS
	STA SHL1V
	STA MOBJVB		;& MOTION OBJECT
	STA SECBIT
	LDA I,0FF
	STA LINEV+BACKROUND	;BACKROUND LINES
	LDA I,1
	STA LINEH+BACKROUND
	LDA I,BKLCOL		;BACKROUND LINE  COLOR 
	STA LINEC+BACKROUND
;	LDA I,7			;BACKCOL=7
	STA SKCTL1		;FAST POTS
;	LDA I,BLACK		;BKLCOL IS BLACK
	STA ECOLOR		;INIT SQUARE 0 TO BLACK
	STA LSTCOL		;LAST COLOR WAS BLACK
	LDA I,03
	STA SKCTL		;START POKEY
	STA NXTCLR		;INIT COLOR OF TUBE
	STA POTGO		;START POKEY RUNNING
	LDA I,80		;SPECIAL CASES FOR BACKROUND
	STA PTWAIT		;TURN OFF POT READING FOR SHORT TIME AFTER RESET
	STA VCENT+1
	LDA I,0C0		;INIT HILIGHT
	STA HILIGHT		;INIT TO COLOR F
	JSR ERASE		;REMOVE MOTION OBJECT
	LDA I,40
	STA OUT202		;LAMP OFF & ALL OTHER BITS TOO
	STA DIST
	STA VDIST		;INIT DISTANCE
	LDX I,0
70$:	LDA I,0FF		;SPECIAL CLEAR OF UNUSED LINES
	STA AX,MOTT		;IN MOTION OBJECT
	STA AX,MOTT+100
	STA AX,MOTT+200
	STA AX,MOTT+300
	INX
	BNE 70$
	LDA I,8
	STA READY		;DELAY ON POKEY DATA GOOD
	STA VELH		;ATTRACT SPEED
	STA NOT			;INIT TIME TO NEXT SQUARE (NEW OBJECT TIME)
	STA POTGO1		;READ POT PORTS POKEY 1 FOR COIN OPTIONS
	LDA OPTN1
	PHA
	AND #7F			;SPECIAL THROW AWAY
	STA $CMODE
	PLA
	AND #80			;1 LANG BIT
	STA LANG+1		;TEMP
	LDA #SECURE&0FF		;SET UP SECURITY INDIRECT PTR
	STA SECIND		;LOW BYTE
	LDA #<SECURE/100&0FF>
	STA SECIND+1		;HIGH BYTE
	LDA 90$			;GET RTS
	STA SECURE+SECOFF+1	;PUT IN RTS
90$:	RTS
;

;OTHER TABLES
;
;MESSAGE # FOR LASER STATUS & BACKGROUND COLOR
HCOL:	.BYTE GREEN,YELLOW,RED	;HILIGHT COLOR BASED ON LASER MESSAGE
SCOL:	.BYTE GREEN,RED,YELLOW
SMSG:	.BYTE 21.,17.,16.	;SHIELD STATUS MESSAGE
LMSG:	.BYTE 18.,20.,19.		;LASER STATUS MESSAGE
COLINT:	.BYTE BLACK,RED,BLACK,YELLOW
	.BYTE RED,GREEN,ORANGE,BLACK,BLACK
	.BYTE BLACK,BLACK,BLACK,BLACK,BLACK,BLACK,BLUE
;ABOVE COLORS ARE INITIAL VALUES FOR BELOW
;BLANKING,MOTOBJ(10)&SHELL(10),MOTOBJ(01)&SHELL(01),MOTOBJ(00)
;ALPHA,HILIGHT(01)&SHELL(00),HILIGHT(10),BACKROUND
;LINES(4-E),HILIGHT(11)
	.PAGE
	.SBTTL CRAMIT
CRAMIT:	LDX I,3*5
10$:	LDA X,INITIT
	STA X,INITL		;INIT INITIALS
	LDA X,INITS
	STA X,HSCORE
	DEX
	BPL 10$
	RTS
INITIT:	.BYTE 4F,52,52,44,4C,53,44,44,53,4F,44,44,4A,45,44
INITS:	.BYTE 0,5,0,0,4,0,0,3,0,0,2,0,0,1,0
EXSCR:	.BYTE 30,60,90,0		;EX PLAY THOUSANDS LEVEL
	.END
                                                                                                        