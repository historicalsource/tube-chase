	.TITLE TCMOT -- TUBE CHASE MOTION ROUTINE
	.ENABL AMA
	.RADIX 16
	.SBTTL GAME DESCRIPTION & ALLOCATION
	.REPT 0
**********************************************
*PROJECT #:	16703
*
*DISK #:	99 & B41
*
*HARDWARE:		DAVE SHERMAN "SPECIAL" ELLIPSE 
*
*ASSEMBLY:	...=DX1:TCMOT
*
*LINK:		SEE TCMAIN FOR LATEST STUFF
*
*DESCRIPTION:	THIS IS A 1 PLAYER GAME WHERE
*		THE PLAYER TRIES TO "FLY"
*		THROUGH A TUBE WHICH MOVES UP,
*		DOWN, LEFT & RIGHT.  (MOTION
*		IS NIGHT DRIVER STYLE)
*
***********************************************
*
*PROGRAMMER:	OWEN RUBIN
*
*ROUTINES BY:	ED LOGG, DAVE SHEPPERD
*
*KEY GRIP:	MIKE ALBAUGH
*
*CHECKER:
*
***********************************************
	.ENDR
	.NLIST
	.INCLUDE TCDEF
	.LIST
	.SBTTL	GLOBALS
;
;GLOBALS GO HERE
;
	.GLOBL MOTION,MULT,MULTS,NEG,SECTIONS,MOTOUT	;ENTRY POINTS
	.GLOBL TARGET,ERASE,MOTSET			;ENTRY POINTS
	.GLOBL SLOWDN,COLCHG,OBJDAC			;EXTERNAL ROUTINES
	.GLOBL TKADT,SKILL1,S.OFF,TI.OFF			;TRACK TABLES
	.GLOBL EXPLOS
	.GLOBL STSOUND


;**********************************************************
;***	        					***
;***							***
;***			FORMULAS			***
;***     VEL=VEL +GTBL(GEAR.GAS.VEL) - DTBL(.GEAR)      ***
;***		     VELK=(VEL)(KP)			***
;***		     STC=(STEER)(VEL)			***
;***		     PXO=PXO-(PYA)(VELK)+STC		***
;***		     PXE=PXE+(PYA)(VELK)+STC		***
;***		     PYA=PY-PYMIN-2.			***
;***		     PY=PY+(PYA)(VEL)			***
;***							***
;**********************************************************
	.SBTTL MACROS FOR MISSING INSTRUCTIONS
	.CSECT TCMOT

	.RADIX 16
	.MACRO LAH LABEL
	LDA I,0
	.=.-1
	.ENABL M68
	.WORD LABEL
	.DSABL M68
	.=.-1
	.ENDM
	.MACRO LAL LABEL
	LDA I,0
	.=.-1
	.WORD LABEL
	.=.-1
	.ENDM
	.MACRO LYL LABEL
	LDY I,0
	.=.-1
	.WORD LABEL
	.=.-1
	.ENDM
	.MACRO DLOAD LABEL
	LAH LABEL
	LYL LABEL
	.ENDM
	.PAGE
;TEMP LOCATION
	.SBTTL TUBE (TRACK) INFO
;
;TRACK CURVENESS, DISTANCE AND CONTROL
;CURVENESS IS A SIGNED 7 BIT NUMBER
;DISTANCE IS A VLUE 0-3F
;TOP 2 BITS OF DISTANCE=CONTROL INFO
;00=CURVE AS NORMAL (LEFT/RIGHT)
;01=UP/DOWN CURVE
;10 OR 11=SPLIT TUBE, CURVE IS LEFT/RIGHT
;
TKADT:	.WORD SKILL1,SKILL3,SKILL4
SKILL1:	.BYTE 0,3F,0,3F,0,3F	;START W/LONG STRAIGHT
	.BYTE 8,60,88,7F,8,60	;UP/DOWN HILL
	.BYTE 0,3F		;SMALL STRAIGHT
	.BYTE 8,3F,88,3F	;NOW TURN LEFT THEN STRAIGHT
	.BYTE 8,0BF,88,0BF
	.BYTE 0,0BF,80		;SPLIT & END SKILL LEVEL
SKILL3:	.BYTE 0,3F		;SHORT STRAIGHT
	.BYTE 8,3F,88,3F,8,10,90,20	;LEFT/RIGHT TURN
	.BYTE 8,3F,0,3F		;FINISH TURN
	.BYTE 10,60,90,7F,10,60	;UP/DOWN HILL
	.BYTE 0,3F,90,3F,90,3F,90,3F,10,3F
	.IF EQ,SPLITS
	.BYTE 8,0BF,88,0BF,88,0BF,0,3F
	.ENDC
	.BYTE 0,0BF,80		;NOW SPLIT
SKILL4:	.BYTE 90,3F,90,3F,0,90,10,3F	;TURN RIGHT AWAY
	.BYTE 0,20,88,10,8,10,90,3F	;CONTINUE HARD TURNS
	.BYTE 10,3F,10,3F,90,3F,10,3F,10,3F
	.BYTE 10,60,90,7F,10,60,0,3F	;HILL THEN STRAIGHT
	.BYTE 10,60,90,3F,90,7F,10,3F
	.IF EQ,SPLITS
	.BYTE 10,0BF,90,0BF,90,0BF,0,20,10,0BF
	.ENDC
	.BYTE 0,0BF,80		;SPLIT & END
SHPCOL:	.BYTE CYAN,CYAN,BLUE,GREEN,YELLOW,WHITE,BLACK,BLACK
	.BYTE 25			;CKSUM 3
	.SBTTL	(CK3)
	.SBTTL MAIN MOTION LOOP
M08:	.BYTE 8			;USED FOR BIT TEST
M04:	.BYTE 4
MOTION:
	.SBTTL	TUBE VELOCITY CALCULATIONS
;COMPUTE STC=(VELL,VELH)*STEER
;LIMIT STC TO +/- 300 (HEX)

DNEVEL:	LDX I,VELL		;SET ADDRESS OF MULTIPLICAND
	LDY I,STCL		;ADDRESS OF PRODUCT
	LDA ORH			;MOTION LIMIT
	CMP I,LLMT		;TO FAR LEFT ?
	BCS 10$			;NOPE
	BIT STEER		;IF YES, ONLY ALLOW STEER RIGHT
	BMI NOSTR		;NO STEERING
	BPL 12$			;WELL, OK  (******* ALWAYS*********)
10$:	CMP I,RLMT		;TO FAR RIGHT
	BCC 12$			;NOPE
	BIT STEER		;IF YES, ONLY ALLOW STEER LEFT
	BPL NOSTR
12$:	LDA Z,STEER		;STEERING PLUS?
	BPL STRPL		;YES
	EOR I,0FF		;NO
	CLC			;NEGATE STEERING
	ADC I,1
	JSR MULT		;COMPUTE 'STC' (MINUS)
	JSR STCLMT		;TOO BIG?
	JSR NEG
	JMP VDNV
STCLMT:	LDA I,4
	CMP STCH		;>4?
	BPL 1$
	LDA I,3
	STA STCH
1$:	RTS
NOSTR:	LDA I,0			;AND DON'T ALLOW STEERING
STRPL:	JSR MULT
	JSR STCLMT		;STC TOO BIG? ADJUST
;VSTC	=(VELL,VELH)*SPLSPD
;LIMIT VSTC TO +/- 300 HEX
VDNV:	LDY I,VSTCL		;ADDR OF PRODUCT
	LDA UPD			;UP/DOWN SPEED
	BPL VSTRPL		;PLUS?
	EOR I,0FF		;NEGATE UP/DOWN STEERING
	CLC
	ADC I,1
	JSR MULT		;COMPUTE 'VSTC' (MINUS)
	JSR VSTCLM
	JSR NEG
	JMP CMPCRV
VSTCLM:	LDA I,4			;LIMIT SPEED
	CMP VSTCH
	BPL 1$
	LDA I,3
	STA VSTCH
1$:	RTS
VSTRPL:	JSR MULT
	JSR VSTCLM

;(CRVL,CRVH)=CS*(VELL,VELH)

CMPCRV:	LDY I,CRVL		;ADDRESS OF PRODUCT
	LDA Z,CS		;GET MULTIPLIER
	BPL 1$			;POSITIVE RESULT
	AND I,7F
	JSR MULT
	JSR NEG				;NEGATIVE RESULT
	JMP 2$
1$:	JSR MULT		;COMPUTE CRV
;(VRVL,VRVH)=VCS * (VELL,VELH)
2$:	LDY I,VRVL		;ADDR OF PRODCUT
	LDA Z,VCS		;GET MULTIPLIER
	;X POINTS TO MULTISPLICAN (VELL)
	BPL 3$
	AND I,7F
	JSR MULT
	JSR NEG			;NEGATE RESULTS
	JMP 4$
3$:	JSR MULT
4$:	LDY I,VELKL
	LDA I,60		;SET ACC=KP (VELK)
	JSR MULT		;COMPUTE VEL*KP
	.PAGE
	.SBTTL	PYLON MOTION
;BEGIN PYLON MOTION COMPUTATION
	LDX I,20
	LDA I,0
5$:	STA X,HPOST
	DEX
	BPL 5$
	LDX I,NOOBJTS-1		;OBJECT INDEX
MOVOBJ:	LDA I,0			;CLEAR OLD
	LDA ZX,ZCNTRL		;GET CONTROL BYTE. OBJECT ACTIVE?
	STA R3
	BMI DOBJ2		;YES.
DOBJ:	DEX
	BPL MOVOBJ
	JMP OBJDNE
DOBJ2:	STX R4
11$:	LDA ZX,ZYAXH		;GET PY Y-POSN.
	SEC
	SBC I,PYMIN-2.		;NORMALIZE TO HORIZON
	STA Z,PYA
	LDX I,VELKL		;ADDRESS OF MULTIPLICAND
	LDY I,PYAVKL		;ADDRESS OF PRODUCT
	JSR MULT		;COMPUTE PYAVK = PYA*VELK
	LDX I,VELL
	LDY I,PYAVL
	LDA Z,PYA
	JSR MULT		;COMPUTE PYAV = PYA*VEL
	LDX R4			;GET BACK OBJECT PTR
15$:	CLC
	LDA VSTCL
	ADC X,UPDNL		;ADD IN STEERING
	STA X,UPDNL
	LDA VSTCH
	ADC X,UPDNH
	CMP I,UPLMT		;DID WE HIT THE TOP?
	BCC 16$			;IF CC, NO. SO CHECK LOWER SIDE.
	LDA I,UPLMT		;... ELSE SET TO TOP LIMIT
	BNE 17$			;***** ALWAYS **********
16$:	CMP I,DNLMT		;DID WE HIT THE BOTTOM?
	BCS 17$			;IF CS, WE DID NOT. 
	LDA I,DNLMT		;... ELSE SET TO BOTTOM LIMIT
17$:	STA X,UPDNH
	LDA PYAVKL
	STA R1
	LDA PYAVKH
	STA R2
	.IF NE,SPLITS
	LDA I,4			;STATUS
	BIT R3			;SPLIT START?
	BEQ 18$
	ASL R1			;IF SPLIT START, EDGES MOVE AT 2X
	ROL R2			;SPEED X2
	.ENDC
18$:	LDA ZX,ZXAXLL		;UPDATE X AXIS POSITION LEFT SIDE
	SEC
	SBC Z,R1
	STA ZX,ZXAXLL
	LDA ZX,ZXAXLH
	SBC Z,R2
	STA ZX,ZXAXLH		;ZXAXLH(X)=ZXAXLH(X)-PYAVK
;ZCNTRL(X-1)[1:0]:=ZCNTRL(X-1)[1:0]+(PYAVKH[7]*3)
	LDA I,0FC		;-3 (ONES-COMP)
	BIT R2			;CHECK PYAVKH[7]
	BMI 21$			;IF -, SUBTRACT 3
	LDA I,0FF		;ELSE    "      0
21$:	ADC ZX,ZCNTRL		;FROM ZCNTRL
	EOR ZX,ZCNTRL		;PRE-DISTORT
	AND I,3			;CLEAR UPPER
	EOR ZX,ZCNTRL		;RE-INSERT UPPER, CORRECT LOWER
	STA ZX,ZCNTRL		;UPDATE THE MSB'S OF X POSN.(D0,D1 OF ZCNTRL-1)

	CLC
	LDA Z,STCL		;ADD IN STEERING CONSTANTS LEFT SIDE
	ADC ZX,ZXAXLL
	STA ZX,ZXAXLL
	LDA Z,STCH
	ADC ZX,ZXAXLH
	STA ZX,ZXAXLH
	LDA I,3			;OVERFLWO TO TOP '2' BITS
	BIT STCH
	BMI 23$
	LDA I,0
23$:	ADC ZX,ZCNTRL			;UPDATE BITS 16 & 17
	EOR ZX,ZCNTRL
	AND I,3
	EOR ZX,ZCNTRL
	STA ZX,ZCNTRL
CRLOK:	LDA ZX,ZCNTRL
	BIT A,M08		;START OF SPLIT OR OLD SPLIT SECTION ?
;
;ABOVE SHOULD BE 'BIT A,M04'
;IF INSIDE WALL IS TO MOVE ON SPLITS
	BNE 22$			;IF YES, RIGHT EDGE DOES NOT MOVE
	LDA ZX,ZXAXRL		;GET X POSITION RIGHT SIDE
	CLC
	ADC Z,PYAVKL		;UPDATE X POSITION RIGHT SIDE
	STA ZX,ZXAXRL
	LDA ZX,ZXAXRH
	ADC Z,PYAVKH
	STA ZX,ZXAXRH
	LDA I,3
	BIT PYAVKH
	BMI 21$
	LDA I,0
21$:	ADC ZX,ZCNTRR
	EOR ZX,ZCNTRR
	AND I,3
	EOR ZX,ZCNTRR
	STA ZX,ZCNTRR
22$:	LDA Z,STCL		;ADD IN STEERING CONSTANTS
	ADC ZX,ZXAXRL
	STA ZX,ZXAXRL
	LDA Z,STCH
	ADC ZX,ZXAXRH
	STA ZX,ZXAXRH
	LDA I,3
	BIT STCH
	BMI 23$
	LDA I,0
23$:	ADC ZX,ZCNTRR		;TAKE CARE OF BITS 16 & 17
	EOR ZX,ZCNTRR
	AND I,3
	EOR ZX,ZCNTRR
	STA ZX,ZCNTRR
CRROK:
	.PAGE
	.IF NE,SPLITS
;
;IF SPLIT SECTION, MOVE SPLIT SIDE SAME AS REGULAR SIDE
;
 	.SBTTL	SPLIT SECTION MOVE
	LDA ZX,ZCNTRL		;SPLIT SECTION?
	BIT A,M08			;SPLIT OR OLD SPLIT SECTION?
	BNE SPLT
	JMP YMOV
SPLT:
	.IF NE,0
;THIS SECTION IF INSIDE WALL OF SPLIT (RIGHT SIDE) TO MOVE
	LDA I,4			;START SPLIT?
	BIT R3			;STATUS IN R3
	BNE 22$			;SKIP IF TRUE
	LDA PYAVKL		;RESTORE R1 & R2 TO NORMAL SPEED ...
	STA R1			;... FOR USE ON RIGHT EDGE BELOW
	LDA PYAVKH
	STA R2
	LDA X,SXAXLL		;MOVE LEFT EDGE AS NORMAL
	SEC
	SBC PYAVKL		;SPEED
	STA X,SXAXLL
	LDA X,SXAXLH		;DO 'MIDDLE' 8 BITS
	SBC PYAVKH
	STA X,SXAXLH
	LDA I,0FC		;-3 (1'S COMP) INCASE OF UNDER-FLOW
	BIT PYAVKH		;UNDER FLOW?
	BMI 21$			;YES ...
	LDA I,0FF		;ELSE SUBTRACT 0 (THERE IS THE CARRY!!!)
21$:	ADC X,OVERL		;BIT REPLACE TOP 2 BITS INTO BYTE
	EOR X,OVERL		;(ONE OF MIKE A.'S TRICKS)
	AND I,3
	EOR X,OVERL
	.ENDC
22$:	LDA Z,STCL		;STEERING CONSTANTS, LEFT SIDE
	ADC ZX,SXAXLL
	STA ZX,SXAXLL
	LDA Z,STCH
	ADC ZX,SXAXLH
	STA ZX,SXAXLH
	LDA I,3			;CHECK TOP 3 BITS
	BIT STCH
	BMI 23$
	LDA I,0
23$:	ADC ZX,OVERL
	EOR ZX,OVERL
	AND I,3
	EOR ZX,OVERL
	STA ZX,OVERL
SXLOK:				;DO SAME WITH RIGHT SIDE
10$:	LDA ZX,SXAXRL
	CLC
	ADC Z,R1		;USE R1 & R2
	STA ZX,SXAXRL
	LDA ZX,SXAXRH
	ADC Z,R2		;RECALL R1 & R2 ARE EITHER NORMAL OR X2
	STA ZX,SXAXRH
	LDA I,3
	BIT R2
	BMI 21$
	LDA I,0
21$:	ADC ZX,OVERR
	EOR ZX,OVERR
	AND I,3
	EOR ZX,OVERR
	STA ZX,OVERR
	LDA Z,STCL		;STEERING
	ADC ZX,SXAXRL
	STA ZX,SXAXRL
	LDA Z,STCH
	ADC ZX,SXAXRH
	STA ZX,SXAXRH
	LDA I,3			;TAKE CARE OF TOP 2 BITS
	BIT STCH
	BMI 23$
	LDA I,0
23$:	ADC ZX,OVERR
	EOR ZX,OVERR
	AND I,3
	EOR ZX,OVERR
	STA ZX,OVERR
	.ENDC
;
				;WOULD CHECK CRASH HERE
YMOV:
;
;NOW MOVE IN Y DIRECTION
;
10$:	LDA ZX,ZYAXL		;UPDATE Y POSITION
	CLC
	ADC Z,PYAVL
	STA ZX,ZYAXL		;ZYAX(X):=PYAV+ZYAX(X)
	LDA ZX,ZYAXH
	ADC Z,PYAVH
	BCS 20$
	STA X,ZYAXH
	CMP I,BOTTOM		;AT BOTTOM OF SCREEN?
	BCC YPOK
	.PAGE
	.SBTTL	COLLISION ACTION
	.GLOBL CENTER
20$:	JSR CENTER
	LDA R0
	CMP I,CRRHT		;SEE IF CENTER IS TOO FAR OFF SIDE
	BCS 25$			;YES
	CMP I,CRLFT		;OTHER SIDE
	BCS DEACT
25$:	BIT Z,STATE		;ATTRACT MODE?
	BMI DEACT		;YES. IGNORE CRASH
	JSR SLOWDN
	LDA STATE
	ORA I,2			;SET WALL COLLISION FLAG
	STA STATE
DEACT:	LDA I,0			;CLEAR OBJECT CONTROL
	STA ZX,ZCNTRL
	STA ZX,ZCNTRR
	TXA
	PHA			;SAVE IX
	LDA X,COLUR		;GET COLOR OF OBJECT REMOVED
	TAX
	LDA X,COLARY+SQUARC	;GET SHADE/COLOR VALUE
	STA LSTCOL		;PUT IT AWAY FOR LATER
	STA COLARY+BKLCOL	;SET TO BACKROUND SHADE/COLOR
	PLA
	TAX			;RESTORE IX
;NO HARM IN JUST FALLING THUR, I WAS GOING TO YP ANYWAY
YPOK:	LDA ZX,ZCNTRL
	AND I,0BF		;DROP CRASH BIT
	STA ZX,ZCNTRL
	LDA ZX,ZCNTRR
	AND I,0BF		;DROP CRASH BIT
	STA ZX,ZCNTRR

				;NEXT OBJECT
YP:	JMP DOBJ		;CONTINUE
	.PAGE
	.SBTTL FIND NEXT POSSIBLE SECTION FOR OUTPUT
;CONVERTS NIGHT-DRIVE PYLONS TO SQUARES ON DAVE'S HARDWARE
;
;FIND THE LARGEST SECTION NOT YET OUTPUT & DO IT
;	LIM:=255.
;	FOR J=7 TO 0 DO
;	    BEGIN:  MAX:=0
;		   I:=-1
;		   FOR X=7 TO 0 DO
;		      BEGIN:  IF Y(X)<LIM.AND.Y(X)>MAX
;		          THEN MAX:=Y(X)
;			      I:=X
;			  END
;		   IF I<>-1 THEN LIM=MAX
;			      MAKESQ(X)
;		   END
;
SECTIONS:
	LDX I,20
	LDA I,0
5$:	STA X,HPOST
	DEX
	BPL 5$
	LDX LSTCOL		;REFRESH BACKROUND
	LDA I,BKLCOL		;BACKGROUND COLOR INDEX
	STA LASTC		;INIT BOTTOM LINE
	LDA I,255.
	STA R0			;R0=LIM
	STA RLIMIT		;SET OUTPUT LIMITS
	STA BLIMIT
	LDA I,NOOBJTS-1		;7 SQUARES MAX
	STA R1			;R1=J
	LDY I,0
	STY LLIMIT		;SET OUTPUT LIMITS
	STY TLIMIT
10$:	LDY I,0
	STY R2			;R2=MAX
	DEY			;MAKE A "-1"
	STY R5			;R5=I
	LDX I,NOOBJTS-1		;7 POSSIBLE ACTIVE OBJECTS
20$:	LDA ZX,ZYAXH
	CMP R0			;Y(X)<LIM
	BCS 25$			;NO, SKIP
	CMP R2			;Y(X)>MAX
	BCC 25$			;NO, SKIP
	STA R2			;MAX:=Y(X)
	STX R5			;I:=X
25$:	DEX			;NEXT
	BPL 20$			;

	LDX R5
	BMI 30$
	LDA R2			;LIM=MAX
	STA R0
	LDA ZX,ZCNTRL		;OBJECT ACTIVE?
	BPL 28$
	JSR NMSQT		;MAKE A SQUARE
28$:	DEC R1
	BPL 10$
30$:	RTS

	.PAGE
	.SBTTL	MAKE A SQUARE
;
;CONVERTS NIGHT DRIVER PYLONS TO 2 BOUNDARY LINES
;AND MAKE A SQUARE
;RIGHT AND LEFT REFER TO MIRROR IMAGES ONLY
NMEXIT:	RTS
NMSQT:	LDY INDEX		;OUTPUT POINTER
	LDA X,ZCNTRR		;BOTH EDGES OFF?
	AND X,ZCNTRL
	AND I,3
	BNE NMEXIT		;IF YES, SKIP
	LDA X,ZXAXRL
	CMP Z,ZXAXLL		;SET CARRY FOR SUBTRACT
	LDA X,ZXAXRH
	SBC X,ZXAXLH		;GET SIZE
	STA R3			;SAVE SIZE (HALF SIZE)
	BEQ NMEXIT		;IF 0 SIZE, SKIP IT
	BCC 5$			;NOT LARGER THAT 100 SO SIZE IS 'CORRECT'
	LDA X,ZCNTRR
	ORA X,ZCNTRL		;OFF SIDE SET
	AND I,3
	BEQ 5$			;NO
	LDA I,0FF		;IF SIZE IS > 100 SET TO MAX (FF)
	STA R3
5$:	LDA X,ZCNTRR		;IS RIGHT SIDE OFF SCREEN
	AND I,03
	BNE 10$			;IF YES, SET AT RIGHT BOUNDARY
	LDA X,ZXAXRH		;RIGHT BOUNDARY
	CMP RLIMIT		;OUTSIDE LIMIT?
	BCC 20$			;IF NO, USE RIGHT POSITION
10$:	LDA RLIMIT
20$:	STA RLIMIT		;SET TO RIGHT LIMIT
	CMP LLIMIT		;IF RIGHT PAST LEFT LIMIT, SKIP
	BCC NMEXIT
	STA Y,VSTR		;TOP LINE VSTART
	STA Y,VSTR+1		;BOTTOM LINE VSTART
	LDA X,ZCNTRL		;LEFT EDGE OFF SCREEN?
	AND I,3
	BNE 30$			;IF YES, SET AT LIMIT
	LDA X,ZXAXLH
	CMP LLIMIT		;OUTSIDE LIMIT
	BCS 40$
30$:	LDA LLIMIT		;GET LIMIT
40$:	STA LLIMIT		;RESTORE LIMIT
	CMP RLIMIT		;IS LEFT PAST RIGHT?
	BCS NMEXIT		;IF YES, SKIP THIS LINE
	STA Y,VSTOP
	STA Y,VSTOP+1		;SET STOP BOUNDARIES
	LDA R3			;SIZE
	LSR			;HALF
	CLC			;ADD TO POSITION.....
	ADC X,UPDNH		;UP/DOWN
	BCS 41$			;DID WE WRAP OFF EDGE?
	CMP BLIMIT		;PAST BOTTOM EDGE?
	BCC 50$			;OR AS IS
41$:	DEC BLIMIT		;CORRECT SO NO OVERLAPPING LINES
	LDA BLIMIT
50$:	STA BLIMIT		;SET LIMIT
	CMP TLIMIT		;BOTTOM PAST TOP?
	BCC REMOV
	STA Y,HPOST		;SET BOTTOM LINE
	SEC
	SBC R3			;'ADD' SIZE OF SQUARE
	BCC 60$			;IF OVERFLOW, SET TO LIMIT
	CMP TLIMIT		;PAST TOP ?
	BCS 70$			;IF NO, USE #
60$:	INC TLIMIT		;CORRECT SO NO OVERLAPPING LINES
	LDA TLIMIT
70$:	STA TLIMIT		;NEW LIMIT
	CMP BLIMIT		;TOP PAST BOTTOM
	BCS REMOV
	STA Y,HPOST+1
	LDA LASTC		;COLOR OF LAST SQUARE OUT (INDEX)
	STA Y,ECOLOR
	LDA X,COLUR		;COLOR OF TOP LINE (HPOST)
	CLC
	ADC I,SQUARC		;POINT TO TOP 8 IN COLOR RAM
	STA Y,ECOLOR+1		;SET COLOR INTO OUTPUT BUFFER
	STA LASTC		;COLOR FOR BOTTOM OF NEXT SQUARE
	INY
	INY
	STY INDEX
	RTS
;SET SQUARE TO 0 IF ITS REALLY OFF SCREEN
REMOV:	LDA I,0
	STA Y,HPOST
	STA Y,HPOST+1
	RTS
	.IF NE,SPLITS
;
;RIGHT SPLIT TAKEN SO MOVE ALL INFO DOWN TO BOTTOM
;
RCORR:	LDX I,NOOBJTS-1
10$:	LDA X,ZCNTRL
	BPL 20$
	LDA X,OVERL
	ORA I,80			;SET ACTIVE BIT
	STA X,ZCNTRL
	LDA X,OVERR
	STA X,ZCNTRR
	LDA X,SXAXLL
	STA X,ZXAXLL
	LDA X,SXAXLH
	STA X,ZXAXLH
	LDA X,SXAXRL
	STA X,ZXAXRL
	LDA X,SXAXRH
	STA X,ZXAXRH
20$:	DEX
	BPL 10$
	RTS
	.ENDC
	.PAGE
	.SBTTL MOVE ORIGINS
OBJDNE:	STA WTCHDG
	LDA ORH
	CMP I,LLMT
	BCS 4$
3$:	LDA I,0
	STA CRVL
	STA CRVH
	BEQ 5$			;ALWAYS
4$:	CMP I,RLMT
	BCS 3$
5$:	CLC
	LDA Z,STCL
	ADC Z,CRVL		;MOVE ORIGIN BY COMPUTING
	STA Z,PRODL		;STC+CRV
	LDA Z,STCH
	ADC Z,CRVH
	STA Z,PRODH
	CLC
	LDA Z,ORL		;ADD TO OLD ORIGIN POSITION
	ADC Z,PRODL
	STA Z,ORL
	LDA Z,ORH
	ADC Z,PRODH
	STA Z,ORH
10$:	LDA I,3
	BIT Z,PRODH
	BMI 11$
	LDA I,0
11$:	ADC Z,ORVH
12$:	AND I,3
	STA Z,ORVH
;NOW MOVE UP/DOWN ORGIN
13$:	CLC
	LDA VSTCL		;MOVE UP/DOWN ORGIN
	ADC VRVL		;VSTC+VRV
	STA R0
	LDA VSTCH
	ADC VRVH
	STA R1
	CLC
	LDA VCENT		;ADD IN OLD V ORIGIN
	ADC R0
	STA VCENT
	LDA VCENT+1
	ADC R1
	CMP I,UPLMT		;MOVED TO HIGH OR LOW?
	BCS STPOM		;IF CS, YES .. SO DONT STORE NEW VALUE
	CMP I,DNLMT
	BCC STPOM		;IF CC, AGAIN PAST A LIMIT SO DONT STORE
	STA VCENT+1
STPOM:
50$:	LDA Z,VELH
	LSR
	STA Z,PRODH
	LDA Z,VELL		;DIVIDE VELOCITY BY 8
	ROR
	LSR Z,PRODH
	ROR
	LSR Z,PRODH
	ROR
	STA Z,PRODL
	CLC
	ADC Z,TURNL		;ADD TO TURN TIME
	STA Z,TURNL
	LDA Z,TURNH
	ADC Z,PRODH
	STA Z,TURNH
	CMP Z,DIST		;TURN OVER?
	BCC CNTRN		;YES,GET NEW INFO
	LDA I,0
	STA Z,TURNL
	STA Z,TURNH		;ELSE ZERO TURN-TIME
	BIT STATE
	BMI CNTRN		;NO TURN IN ATTRACT
	LDY I,0			;PT TO NEXT CS
	LDA NY,TRKADL
	CMP I,80
	BNE 15$
	LDA SKILL		;GET SKILL LEVEL
	ASL
	TAX
	LDA AX,TKADT
	STA TRKADL
	LDA AX,TKADT+1
	STA TRKADH
15$:	LDA NY,TRKADL		;GET CS
	STA Z,R0		;SAVE FOR NOW
	INY
	LDA NY,TRKADL		;GET DIST & CONTROL BITS
	STA R1
	AND I,3F
	ASL			;USE 2 TIMES DISTANCE
	STA Z,DIST
	STA VDIST		;SET BOTH DISTANCES
	BIT R1
	.IF NE,SPLITS
	BMI 30$			;SPLIT TIME
	.ENDC
	BVS 35$			;UP, DOWN
14$:	LDA R0			;NORMAL CURVE
	STA CS
	.IF EQ,SPLITS
	BIT R1			;BOTH UP/DOWN AND TURN?
	BMI 35$			;YES
	.ENDC
	LDA I,0
	STA VCS			;SET UP/DOWN 0
	BEQ 40$			;DONE
35$:	LDA R0
	STA VCS			;SET UP/DOWN CURVE
	.IF EQ,SPLITS
	BIT R1
	BMI 40$			;AS ABOVE BOTH UP/DOWN & TURN
	.ENDC
				;SET WALL COLLISION FLAG
	LDA I,0
	STA CS			;LEFT/RIGHT TO 0
	BEQ 40$
	.IF NE,SPLITS
30$:	LDA I,08
	STA SPCONT		;8 SECTION SPLIT
	BNE 14$			;CONTINUE AS NORMAL TURN
	.ENDC
40$:	TYA			;ACC=1
	SEC
	ADC TRKADL		;TRKADL+2
	STA TRKADL
	BCC CNTRN
	INC TRKADH
CNTRN:
;NOW COMPUTE V TURN INFO
	CLC
	LDA PRODL		;LSB OF VELOCITY /8
	ADC VCRNL
	STA VCRNL		;ADD TO TURN TIME
	LDA VCRNH		;PROPAGATE INTO MSB
	ADC PRODH
	STA VCRNH
	CMP VDIST		;UP/DOWN TURN OVER?
	BCC 20$			;NO SO CONTINUE TURN
	LDA I,0
	STA VCRNL		;ELSE ZERO TURN-TIME
	STA VCRNH
20$:
	LDA Z,PRODL		;TRACK DISTANCE COVERED
	CLC			;  DETERMINES WHEN NEW OBJECT MUST
	ADC Z,OBJTML		;  BE PLACED AT ORIGIN
	STA Z,OBJTML
	LDA Z,PRODH
	ADC Z,OBJTMH
	STA Z,OBJTMH
	CMP NOT		;NEW OBJECT TIME?
	BCC FI0			;NO
	LDA I,0D		;RESET WAIT TIME
	STA NOT
;	JMP NEWOBJ		;(FALL THRU)
	.PAGE
	.SBTTL	START NEW OBJECT

;NEED A NEW OBJECT, SCAN FOR FREE SLOT

NEWOBJ:	LDA SMOK2		;COLLISION IN PROCESS?
	BNE FI0			;IF YES, DON'T START
	LDX I,NOOBJTS-1		;7 OBJECTS POSSIBLE
30$:	LDA ZX,ZCNTRL		;OBJECT ACTIVE?
	BPL FIOBJ		;NO
	DEX
	BPL 30$
FI0:	RTS			;ALL OBJECTS ACTIVE
FIOBJ:	STX R0			;SAVE X JUST IN CASE!
;
;SPLIT START LOGIC (HA,HA!!!)
;
	LDA I,80		;GUESS NORMAL TUBE
	.IF NE,SPLITS
	LDY SPCONT		;IS IT NORMAL?
	BEQ 9$			;YES, CONTINUE
	CPY I,6			;WHERE IN SPLIT SEQUENCE
	BNE 8$
	JMP NXTCNT		;IF 6 IN COUNT, SKIP START SEQUENCE
8$:	BCS 9$			;IF G.T. 6, NOT YET 'TIME' TO SPLIT
	ORA I,8			;SET SPLIT FLAG
	CPY I,5			;5 IS FIRST SPLIT SECTION
	BNE 9$			;NOT FIRST
	ORA I,4			;SET FIRST SECTION FLAG
	.ENDC
9$:	ORA Z,ORVH		;WITH 2 MSB = ORVH
	STA ZX,ZCNTRL
;CHANGE COLOR/SHADE D7-D4 D3-D0=COLOR. STORED INTO COLARY
	INC NXTPTR		;NEXT COLOR
	LDA NXTPTR
	AND I,07
	CMP I,7
	BNE 50$
	LDA I,0
50$:	STA NXTPTR
	LDA NXTCLR		;GET CURRENT COLOR
	LDY DIR			;GET DIRECTION CHANGE REG FOR 'COLCHG'
	JSR COLCHG		;GET NEXT COLOR/INTENSITY
	STY DIR			;RESTORE DIR CHANGE REG
	STA NXTCLR
	AND I,0F
	CMP I,7
	BNE 51$
	INC NXTCLR
51$:	CMP I,0F
	BNE CLRS
	LDA R1			;R1 HAS COLOR FROM ROUTINE 'COLCHG'
	AND I,0F0		;LEAVE SHADE AND 0 COLOR (WHITE)
	STA NXTCLR		;RESTORE
CLRS:	LDA I,0
	.IF NE,SPLITS
	STA ZX,SXAXRL
	STA ZX,SXAXLL
	.ENDC
	STA ZX,ZXAXLL
	STA ZX,ZXAXRL
	STA X,ZCNTRR		;CLEAR ANY OVERFLOW
	.IF NE,SPLITS
	STA X,OVERR
	STA X,OVERL		;CLEAR ANY OVERFLOW
	LDA ZX,ZCNTRL
	LDX SMALL		;POINT TO LAST OUTPUT CIRCLE
	BIT A,M08		;SPLIT?
	BEQ 10$			;NO
	BIT A,M04		;FIRST SPLIT?
	BEQ 25$			;NO-REGULAR SPLIT
;SPLIT STARTS-SET BOTH SIDES TO END OF TUBE
	LDA X,ZXAXRH		;X POINTS TO LAST ELLIPSE OUTPUT
	LDX R0			;RESTORE OLD X
	STA X,SXAXLH		;SET RIGHT SIDE OF SPLIT
	STA X,SXAXRH
	BNE 30$			;REST IS BELOW (*ALWAYS*)
10$:
;NOT A SPLIT SECTION--CHECK ACTION
	LDA WHICH		;DID SPLIT PORTION JUST END?
	BEQ 20$			;NO, THIS IS A REGULAR TUBE
	BPL 12$			;YES, & + MEANS RIGHT SIDE ENTERED
	LDA X,ZXAXLH		;MUST HAVE ENTERED LEFT SIDE
	STA ORH			;SET ORGIN TO END OF TUBE
	LDA X,ZXAXLL
	STA ORL
	LDX I,NOOBJTS-1		;AND REMOVE RIGHT SPLIT SIDE
11$:	LDA X,ZCNTRL
	AND I,83		;TURN OFF ALL BUT ACTIVE & POSITION BITS
	STA X,ZCNTRL
	DEX
	BPL 11$
	BMI 13$			;**ALWAYS
12$:	LDA X,SXAXRH		;SET ORGIN TO END OF TUBE (RIGHT SIDE)
	STA ORH
	LDA X,SXAXRL
	STA ORL
	JSR RCORR		;MOVE ALL ACTIVE PIECES BACK TO LOWER RAM
13$:	LDA I,0
	STA WHICH		;RESET SPLIT INDICATOR
	.ENDC
20$:	LDX R0			;RECALL X POINTING TO NEW TUBE SECTION
	LDA ORL
	STA X,ZXAXLL		;SET TUBLE
	STA X,ZXAXRL
	LDA ORH
	.IF NE,SPLITS
	BNE 30$			;REST IS DOWN BELOW
25$:	
;CONTINUING SPLIT TUBE - NEW SECTION NEEDED-BOTH SIDES
	LDA X,ZXAXLH	
	SEC			;LEFT SPLIT SECTON STARTS 8 OVER FROM LAST
	SBC I,8
	PHA			;SAVE IT
	LDA X,SXAXRH
	CLC
	ADC I,8			;RIGHT SPLIT SECTION STARTS 8 OVER FROM LAST
	LDX R0			;RESTORE OLD X POINTING TO AVAIBLE SPACE
	STA X,SXAXLH
	STA X,SXAXRH		;START RIGHT HALF
	PLA
	.ENDC
30$:	STA X,ZXAXLH		;START LEFT (OR NORMAL)SECTION
	STA X,ZXAXRH
	STX SMALL		;SAVE THIS AS LAST STARTED SQUARE
	LDA NXTPTR		;STORE COLOR IX
	STA ZX,COLUR
NXTCNT:
	.IF NE,SPLITS
	LDA SPCONT
	BEQ 37$
	DEC SPCONT
	BNE 37$
;SET ORGIN AT SPLIT END CLOSEST TO CENTER
	SEC
	LDA X,ZXAXRH		;DETERMIN CLOSEST TO MIDDLE
	SBC I,ORGIN		;LEFT SPLIT
	BCS 10$			;NEGATIVE?
	EOR I,0FF
	ADC I,1			;GET A POSITIVE #
10$:	STA R3			;HOLD DISTANCE FOR COMPARE
12$:	SEC
	LDA X,SXAXLH		;NOW RIGHT SPLIT
	SBC I,ORGIN
	BCS 20$
	EOR I,0FF		;NEGATE
	ADC I,1
20$:	CMP R3			;WHICH IS GREATER?
	BCS 25$			;IF NO CARRY LEFT IS CLOSER
	LDA I,10
	STA CS			;OUT OF SPLIT INTO A CURVE
	BNE 36$			;ALWAYS *****
25$:	LDA I,90		;OUT OF SPLIT INTO A CURVE
	STA CS
36$:	STA WHICH		;+=RIGHT SPLIT,-=LEFT SPLIT
	LDA I,0
	STA TURNL
	STA TURNH		;RESET TURN DISTANCE
	LDA I,10		;LONGER WAIT UNTIL NEXT CIRCLE
	STA NOT
	.ENDC
37$:	LDA I,PYMIN
	STA ZX,ZYAXH		;INITIALIZE YAXIS ORIGIN
	LDA I,0
	STA ZX,ZYAXL
	STA Z,OBJTMH		;CLEAR NEW OBJECT TIME COUNTER
	STA Z,OBJTML
	LDA VCENT+1
	STA ZX,UPDNH
45$:	LDX NXTPTR
	LDA NXTCLR
	STA X,COLARY+SQUARC	;STORE AWAY COLOR
	LDX R0			;RESTORE COLOR
	RTS
	.PAGE
	.SBTTL MATH ROUTINES
	.SBTTL	MULTIPLY
;MULTIPLICATION ROUTINE
;(MEM(Y),MEM(Y+1))=(MEM(X),MEM(X+1))*(A)
;ACCUM = MULTIPLIER (I.FFFFFFF)
;Y = ADDRESS OF PRODUCT (LOW BYTE)
;X = ADDRESS OF MULTIPLICAND (LOW BYTE)

MULT:	STA Z,MLTPLR		;SAVE MULTIPLIER
	LDA I,0
	STA AY,0		;CLEAR PRODUCT
	STA AY,1
MULTS:	LDA ZX,0		;GET MULTIPLICAND
	STA Z,MLTCDL
	LDA ZX,1
	STA Z,MLTCDH
1$:	ASL Z,MLTPLR		;LOOP UNTIL MLTPLR=0
	BCS 2$
	BNE 3$			;AND CARRY CLEAR
	RTS
2$:	CLC
	LDA AY,0		;ACCUMULATE PRODUCT
	ADC Z,MLTCDL
	STA AY,0
	LDA AY,1
	ADC Z,MLTCDH
	STA AY,1
3$:	LDA Z,MLTCDH
	CMP I,80		;SET C IF MINUS
	ROR Z,MLTCDH		;HALVE MULTIPLICAND
	ROR Z,MLTCDL
	JMP 1$
	.SBTTL	NEGATE
NEG:	LDA AY,0		;NEGATE DOUBLE BYTE AT ADDRESS
	EOR I,0FF		;SPECIFIED IN Y REGISTER
	CLC
	ADC I,1
	STA AY,0
	LDA AY,1
	EOR I,0FF
	ADC I,0
	STA AY,1
	RTS

	.SBTTL	DIVIDE ROUTINE
;ALT ALL PURPOS DIVIDE ROUTINE
;DIVIDE A BY Y -> 16 BITS
;QUOTIENT RETURNED IN A (OR IN 'QUOT') & Y (OR QUOT+1)
;
;
;BLITZES A & Y  (NOT X)
;
;PAGE 0: TEMP1,QUOT
;
;NO STACK
;
RDIVIDE:			;ENTRY FOR DIVIDE AS DESCRIBED ABOVE
	STA Z,QUOT+1
	STY Z,R6
	LDA I,0
	STA QUOT
	LDY I,15.		;15 BITS OF DIVIDE
DLOP:	ROL Z,QUOT		;SHIFT IN QUOTIENT
	ROL QUOT+1		;SHIFT OUT DIVIDEND
	ROL
	BCS 2$			;ON OVERFLOW, FORCE SUBTRACT
	CMP Z,R6		;TRIAL SUBTRACT
	BCC 1$			;NOT YET
	SBC Z,R6		;NO NEED TO PRESET CARRY HERE (DO SUBTRACT)
1$:	DEY
	BPL DLOP		;LOOP FOR 16 BITS
	ROL Z,QUOT		;SHIFT IN FINAL QUOT
	LDY Z,QUOT
	LDA QUOT+1
	ROL
	RTS
2$:	SBC Z,R6		;SPECIAL CASE SUBTRACT
	SEC			;PHONY QUOT BIT
	BCS 1$			;BRA
	.PAGE
	.SBTTL TARGET ROUTINES
	.SBTTL	START TARGET ROUTINE
;
;THIS ROUTINE DECIDES WHEN & WHERE TO START A TARGET.
;IF THE TARGET IS TO COME FROM DOWN THE TUBE,
;IT WILL BE STARTED AS CLOSE TO AS POSSIBLE THE CENTER, END
;OF THE TUBE.
;IF THE TARGET COMES FROM BEHIND, IT WILL COME EITHER
;OVERHEAD OR UNDERNEATH, DEPENDING ON YOUR UP/DOWN POSITION
;IN THE TUBE.
;WILL START A SHOT FROM BEHIND IF NEEDED
;
;
TSTART:	BIT STATE		;ATTRACT
	BMI 2$			;YES
	LDA SHTBACK		;JUST HIT SHELL?
	BMI 15$			;YES-START SHIP IMMEDIATLY
	LDA FRAMC
	AND I,3
	BEQ 2$
1$:	RTS
2$:	LDA STDELAY
	BEQ 5$			;OK TO START
	DEC STDELAY
	BNE 1$
5$:	BIT OVERHD		;WAS SHOT LAST OUT?
	BVC 10$			;NO
	LDA I,0			;YES, SO START SHIP
	STA OVERHD		;CLEAR FLAGS
	BEQ BACKST		;**ALWAYS**
10$:
	LDA RANDOM		;START SOMETHING (MAYBE)
	AND I,0F		;SOME RANDOM START TIME
	BNE BACKOUT
	LDA RANDOM		;WHAT TO START
	BPL 20$			;BEHEIND START (MAYBE)
15$:	LDA I,84		;FRONT START
	STA OBJST
	LDA VELH		;START FROM DOWN TUBE
	SEC
	SBC I,2			;START IT SLOWER SO IT WILL CLOSE IN
	STA OBSPD
	LDA VCENT+1
	STA OBJV		;START @ END OF TUBE VERT (CENTER)
	LDA I,PYMIN-20		;DISTANCE JUST OUT OF SIGHT
	STA DISTANCE
	BNE BACK1		;**** ALWAYS ******
20$:	BIT RANDOM		;DO WE WANT TO SHOOT A SHOT PAST FIRST?
	BVC BACKST		;NOT IF V CLEAR
	LDA I,80		;SET SHOT FLAG & START A SHOT
	STA OVERHD
	LDA I,RED		;SHOT IS RED
	STA COLARY+MOTG
;
;START FROM BEHIND (FINALLY)
BACKST:	LDA I,0A0
	STA OBJST
	LDA VELH		;YOUR SPEED
	CLC
	ADC I,7			;BEHIND YOU IS +6 TO MOVE...
	BIT OVERHD		;SHELL
	BPL 25$
	ADC I,4			;IT MOVES FASTER
25$:	STA OBSPD		;...DOWN THE TUBE
	LDA I,PYMIN+94		;JUST BEHIND YOU
	STA DISTANCE
	JSR STPOS		;GET VERT START POSITION
	STA OBJV
BACK1:	LDA I,0
	STA OBSPDL		;LOW BYTE ALWAYS 0
	STA DISDLY		;DISTANCE HOLD TIME ALWAYS 0
	LDA ORH
	STA OBJH		;H CENTER OF TUBE FOR OBJECT ALWAYS
	LDA RANDOM
	AND I,80		;MINUS IS TI-FIGHTER
	STA OBJNUM		;OBJECT PICTURE NUMBER
BACKOUT:LDA LIFETM		;HOW LONG ALIVE
	ROL
	ROL
	ROL
	ROL
	AND I,07
	TAX
	CPX I,6			;#'S 0-5
	BCC 10$
	DEX
10$:	STX BONMUL
	LDA X,SHPCOL
	STA COLARY+MOTW
	LDA I,RED
	STA COLARY+MOTG
BACK2:	LDA I,0
	STA SHTBACK
	RTS
;
;SUBROUTINE TO DETERMIN START POSITION OF SHIP AND SHELLS FROM BEHIND
;
STPOS:	LDA VCENT+1		;VERT POSITION
	BMI 5$
	LDA I,0F0		;IF  LOW START HIGH
	BNE 6$
5$:	LDA I,10		;IF HIGH, START LOW
6$:	RTS
	.PAGE
	.SBTTL	 TARGET MOTION CONTROL
;
;THIS ROUTINE CONTROLS SPEED & ACTION
;OF THE MAIN TARGET & SELECTS PICTURE
;
;BLITZED A,X	;2 BYTES STACK FOR JSR CALL
;
TARGET:	LDA I,20
	BIT OBJST		;GET STATUS OF OBJECT
	BVC 20$
	JMP 60$			;EXPLODING
20$:	BMI 30$			;ACTIVE
	JMP TSTART		;NO ACTIVE, GO START SOMETHING
30$:	BNE 35$			;ALREADY IN PERSUIT
	LDA DISTANCE			;OBJECT IS MOVING IN INITIALLY
	CMP I,PYMIN+30		;CLOSE ENOUGH TO PERSUIT?
	BCS 31$			;NO
98$:	JMP 43$			;PATH FOR OUT OF RANGE BRANCHES
31$:	LDA I,30
	ORA OBJST		;SET PERSUIT & ACCEL BIT
	AND I,0FB		;CLEAR NO ACTION BIT
	STA OBJST
35$:	LDA I,5			;DON'T CHANGE BIT (OR SHOT)?
	BIT OBJST
	BNE 98$			;LEAVE ALONE (SHORT(?) CUT)
	LDA RANDOM		;SOME RANDOM SPEED UP AND SLOW DOWN
	AND I,03F
	STA R0			;SAVE ACCELERATION
	LDA I,10
	BIT OBJST		;ACCEL OR DECL?
	BNE 36$			;ACCEL
	SEC			;DECELL
	LDA OBSPDL			;DECEL AFTER PULLING AWAY
	SBC R0
	STA OBSPDL
	LDA OBSPD
	SBC I,0			;PROP CARRY
	STA OBSPD
	CMP VELH		;OUR SPEED REACHED?
	BCS 43$			;OK AS IS
	LDA 97$			;SET ALREADY PULLED AWAY BIT & ACCEL BIT
	SEC
SBC #8
	ORA OBJST		;REACCEL TO JUST BELOW OUR SPEED
	STA OBJST
	LDA SHTWT		;WAIT AWHILE DURING GAME START
	BEQ 33$			;NO
	BMI 34$			;ALWAYS
	DEC SHTWT
	BNE 43$
33$:	LDA RANDOM
	AND I,01		;FIRE SHOT?
	BNE 43$			;EXIT
34$:	LDA OBJPIC		;SHOOT WHEN AT END OF TUBE
	AND I,018
	BNE 43$			;LONG SHOTS ONLY
	LDA I,80
	STA SHTBACK		;SET SHOOT BACK
	BIT STATE		;NOT DURING ATTACT
	BMI 99$
97$:	JSR SECURE+SECOFF	;SED? FOR SECURITY
99$:	LDA VELH
	SEC
	SBC I,3
	STA R0			;SPEED UP
	LDA I,RED
	STA COLARY+MOTG
	LDA I,1
	ORA OBJST
	STA OBJST
	BNE 37$			;*ALWAYS**
36$:	LDA OBSPDL		;ACCEL
	CLC
	ADC R0
	STA OBSPDL
	LDA OBSPD
	ADC I,0
	CMP VELH
	BCC 39$			;NOT FAST ENOUGH YET
	STA R0			;HOLD
	LDA I,8			;ALREADY PULLED AWAY?
	BIT OBJST			;TEST FOR FINIAL ACCEL OR PULL AWAY ACCEL
	BNE 43$			;DONT CHANGE SPEED.
	LDA R0		;ELSE ACCEL TO PULL AWAY SPEED
	SEC			;SUBTRACT HIS SPEED FROM OURS
	SBC VELH		;HOW MUCH OVER TOP SPEED
	CMP I,4			;PULL AWAY=TOP +4
	BCC 37$
	LDA I,0E0		;WE HAVE REACHED PULL AWAY SPEED
	AND OBJST
	STA OBJST
37$:	LDA R0			;STORE SPEED AWAY
39$:	STA OBSPD
43$:	SEC
	LDA VELH
	SBC OBSPD		;SPEED DIFFERENCE
	CLC
	ADC DISTANCE		;ADD TO NEW POSITION
	STA DISTANCE		;AND SAVE
	CMP I,10
	BCC 40$
42$:	CMP I,0F8		;CRASH?
	BCS OBJCRSH
44$:	CMP I,30		;TO FAR AWAY?
	BCS 50$			;NO WERE OK
	BIT OVERHD		;WAS THIS A SHOT?
	BMI 40$
	LDA DISDLY		;HOW LONG HAVE WE BEEN HOLDING AT A DIST?
	BMI 40$			;TIME TO TRY A RESTART?
	BNE 47$			;KEEP WAITING
	LDA I,7F		;IT WAS 0 SO THIS IS THE FIRST TIME IN
	STA DISDLY		;SO SET DELAY FOR LATER ENTRY
47$:	DEC DISDLY		;KEEP COUNTING
	BEQ 47$			;IF 0, MAKE - SO WE CAN TRY A RESTART
49$:	RTS			;RETURN
40$:	JMP OBJDAC		;SHORT CUT
50$:	AND I,0F0		;LOOK AT TOP BITS ONLY
	SBC I,30		;SUBTRACT HORIZON TO GET PIC NUMBER
	BCS 5$
	JMP REMOVE
5$:	LSR
	LSR			;GET A NUMBER 00-C0 TO 0-C THEN...
	LSR			;OBJECT PIC # X2 ([0:A]*2)
	STA OBJPIC		;SAVE FOR LATER USE
	CMP LASTP		;SAME AS LAST PICTURE?
	BEQ 49$			;IF SAME, NO OUTPUT THIS TIME
	STA LASTP		;ELSE SAVE NEW PIC
	TAX			;SAVE X REG FOR POSSIBLE RECALL
	BIT SHTBACK		;SHOT PICTURE?
	BMI 52$
	BIT OBJNUM		;ALT SHIP?
	BPL 51$			;NO
	CLC
	ADC I,TI.OFF		;MOVE TO ALT PICTURE
51$:	BIT OVERHD		;IS A SHELL GOING BY?
	BPL 54$			;NO
	TXA			;IF YES, GET BACK OLD PICTURE NUMBER
52$:	CLC
	ADC #S.OFF		;MOVE TO SHELL PIC
54$:	TAX			;PUT IX INTO X REG
55$:	JMP MOTOUT		;OUTPUT PICTURE (=JSR:MOTOUT WIN RETURN)
;HERE IF HIT & EXPLODING
60$:	LDA FRAMC
	AND I,07
	BNE 49$			;EXPLOSION SEQUENCE TIME
	STA LASTP		;SO IT WILL REMOVE CORRECTLY LATER
	INC OBJPIC
	INC OBJPIC		;POINT TO NEXT PICTURE
	LDX OBJPIC		;POINT AGAIN
	BNE 55$			;OUTPUT IT
OBJCRSH:BIT STATE
	BMI OBJDAC
	LDA SHIELD		;SHIELDS?
	BPL 10$			;NO SHIELDS
	LDA I,0D0		;SET BACK A BIT
	STA DISTANCE
	LDA TARTBL+1		;START EXPLOSION
	STA OBJPIC
	LDA SHIELE+1
	SBC I,18		;SUBTRACT 10 FROM SHIELDS
	BCS 4$
	LDA I,0			;SET TO 0
4$:	STA SHIELE+1
	LDX I,0
	JSR STSOUND		;EXPLOSION
	LDA I,40
	STA SHLDHT		;RED COLOR IF HIT
	ORA OBJST		;SET EXPLOSION BIT (40)
	STA OBJST
	LDX OBJPIC		;RECALL 1ST EXPLODING PIC
	BNE MOTOUT		;**ALWAYS**
10$:	LDA I,1
	ORA STATE
	STA STATE
	LDA TOPS
	LSR			;OLD TOP/2 = NEW
	CMP #04			;4 MINIMUM
	BCS 12$
	LDA #4
12$:	STA TOPS
				;RESET TOP SPEED
OBJDAC:	LDA I,0			;DEACTIVATE
	STA OBJST		;CLEAR OBJECT
	BIT OVERHD		;DID A SHELL JUST END?
	BPL REMOVE		;NO
	LDA I,40		;YES. SO START A SHIP
	STA OVERHD
REMOVE:	LDA I,0
	STA MOBJVB		;MOVE OFF
	LDA I,0FF
	CMP LASTP
	BNE 10$			;ALREADY REMOVED?
	RTS
10$:	STA LASTP
	.SBTTL	ERASE MOTION OBJECT
ERASE:
	DLOAD MOTT		;START OF TO LINE OF MOTION OBJECT
	STY DPTR		;OUTPUT POINTER
	STA DPTR+1
	STY DPTR2
	STA DPTR2+1
	LDA I,0
	STA RCNT		;NO REPEAT (FOR SURE)
	STA ULCT		;NO UNIQUE LINES
	STA R3			;NOT SYMMETRICAL
	TAX
	TAY			;0 BOTH
	JMP FILL
	.SBTTL MOTION OBJ OUTPUT
;
;PASS POINTER INTO 'SHPTBL' IN X.  CARRY CLEAR=0 OBJ, SET=1
;
MOTOUT:	LDA AX,SHPTBL
	STA SPTR
	LDA AX,SHPTBL+1		;GET SOURCE POINTER
	BEQ OBJDAC		;IF NO MORE PICTURES, SKIP IT
	STA R0			;SAVE FOR X2 BIT
	AND I,7F		;REMOVE POSSIBLE X2 BIT (A15)
	STA SPTR+1
	DLOAD MOTT
	STY DPTR
	STA DPTR+1		;SAVE OUTPUT POINTER
	STY DPTR2		;INIT SYMMETRICAL POINTER ALSO
	STA DPTR2+1
	LDY I,0
	LDA NY,SPTR		;GET UNIQUE LINE COUNT
	STA R3			;SAVE COUNT FOR POSSIBLE SYMM. BIT
	AND I,7F		;STRIP OFF POSSIBL SYMM BIT
	STA ULCT
	STA HOFF
	BIT R0			;CHECK SIZE
	BPL 6$			;X2, LEAVE IT
	LSR
	ADC HOFF		;HOFF IS FUDGE FACTOR TO CENTER IN SQUARE
	STA HOFF		;ELSE HOFF=1.5 ULCT
6$:	INY
	LDA NY,SPTR		;GET VERT SIZE
	STA VOFF
	BIT R0			;X3
	BPL 7$			;NO, X2
	LSR
	ADC VOFF
	STA VOFF		;ELSE VOFF=1.5 VSIZE
7$:	DEC ULCT		;ADJUST ULCT
	TYA			;ACC:=1
	SEC			;+1
	ADC SPTR		;BUMP SRC PTR
	STA SPTR
	BCC 8$			;DOUBLE PREC.
	INC SPTR+1
8$:	BIT R3			;SYMN?
	BPL MOT1		;IF NO, LEAVE ALONE
	LDA I,0
	STA R6
	LDA ULCT		;LINE COUNT
	ASL			;ALL PICS X2
	ROL R6
	ASL
	ROL R6
	ASL
	ROL R6
	ASL
	ROL R6
	CLC			;POINTER * 16
	ADC DPTR2
	STA DPTR2
	LDA DPTR2+1		;POINT TO TOP OF OBJECT OUTPUT POINTER
	ADC R6
	STA DPTR2+1
9$:	LDA DPTR2		;NOW SAVE THIS LOCATION FOR FILL
	CLC
	ADC I,16.
	STA M1
	LDA DPTR2+1
	ADC I,0
	STA M2

MOT1:	LDY I,0
	LDA NY,SPTR
	STA R1			;GET HEADER BYTE
	LSR
	LSR
	LSR
	LSR
	STA RCNT		;SAVE REPEAT COUNT
	INC SPTR
	BNE MOT2
	INC SPTR+1
MOT2:	LDY I,0
	LDA R1
	AND I,0F
	STA SCNT		;SEGMENT COUNT
30$:	LDA NY,SPTR
	STA R2			;SEGMENT STAMP
	AND I,0F		;X2 ALWAYS
	SEC
	ADC R2
35$:	BIT R0			;X3?
	BPL 36$
	AND I,1F		;DOUBLE IT
	SEC
	ADC R2
36$:	STA NY,DPTR		;OUTPUT
	STA NY,DPTR2		;SYMM. OUTPUT
	INY
	DEC SCNT		;COUNT DOWN
	BPL 30$
FILL:
	STA WTCHDG
	LDA I,0FF		;FILLER CODE
	CPY I,16.		;NO EMPTY LEFT?
	BCS 46$
	STA NY,DPTR
	STA NY,DPTR2
46$:	CLC
	LDA DPTR
	ADC I,16.		;
	STA DPTR
	BCC 50$
	INC DPTR+1
	LDA DPTR+1
	AND I,4			;CHECK FOR E.O.B.
	BEQ 70$
50$:	LDA DPTR2
	BIT R3			;SYMM?
	BPL 51$
	DEC ULCT		;IF SMYMERIAL, 2 LINES WENT OUT
	SEC
	SBC I,16.		;MOVE DOWN FROM TOP
	STA DPTR2
	BCS 52$
	DEC DPTR2+1
	BNE 52$
51$:	CLC			;NOT A SYMM. OBJECT SO JUST ...
	ADC I,16.		;... MOVE WITH BOTTOM OBJECT
	STA DPTR2
	BCC 52$
	INC DPTR2+1
52$:	DEC ULCT
	DEC RCNT		;SHOULD WE REPEAT
	BPL MOT2
	TYA
	CLC			;BUMP TO NEXT HEADER
	ADC SPTR		;UPDATE RAM SOURCE POINTER
	STA SPTR
	BCC 55$
	INC SPTR+1
55$:	BIT ULCT		;ANY LINES LEFT?
	BMI 61$
	JMP MOT1
61$:	BIT R3			;IF SYMN, MOVE OUTPUT POINTER
	BPL 60$			;ELSE SKIP IT
	LDY M2
	LDA M1
	STA DPTR
	STA DPTR2
	STY DPTR2+1
	STY DPTR+1		;SET FILL TO TOP OF PICTURE
	LDA I,0
	STA R3			;TURN OFF SYMM BIT
60$:	LDY I,0
	BEQ FILL		;FILL ALWAYS
70$:	LDA I,2			;NORMAL VSTRETCH
	BIT R0			;X2
	BPL 71$
	LDA I,1			;X2
71$:	STA MOVS0		;SAVE VSTRETCH
	RTS
	.PAGE
	.SBTTL	MOTION OBJ OUTPUT CALCULATIONS
;
;PRE-INTERRUPT CALCULATIONS ON MOTION OBJEC PARAMETERS
;
MOTSET:	LDA I,0			;GUESS NO OVERFLOW
	STA HFLOW
	STA MOBSTB		;0 TO MOTION OBJECT START LINE
	BIT OBJST		;ACTIVE?
	BPL 1$			;IF NO, SET AT 0
	LDA VOFF		;V POSITION (SIDE)....
	SEC			;IS OBJECT VERTICAL OFFSET BY SIZE
	SBC OBJV		;TO CENTER OBJECT
	BCC 2$
	LDA I,0FF		;DON'T WRAP
2$:	STA MOBJVB		;PUT TO BUFFER
	LDA OBJH		;H POSIT (SIDE)...
	CLC			;IS OBJECT HORIZ OFFSET BY SIZE
	ADC HOFF		;TO CENTER OBJECT
	BCC 1$			;IS IT OFF EDGE OF SCREEN?
	STA HFLOW		;IF YES, REMOVE PARTIAL PICTURE
	LDA I,0FF		;SET POSITION TO MAX
1$:	STA MOBJHB		;PUT IN BUFFER
	LDX HFLOW
	STX MOBSTB
	SBC I,7F		;VSTOP=MOBJH-80
	BCS 5$			;NO UNDER FLOW
4$:	LDA I,0			;IF UNDER,SET AT 0
	BEQ 6$			;***ALWAYS***
5$:	LDY MOVS0
	CPY I,2			;OBJECT *2?
	BEQ 6$			;IF NOT 2, THEN 1
	SBC I,7F		;SUBTRACT 80(CARRY CLEAR)FOR LARGER OBJECT
	BCC 4$			;CHECK FOR UNDERFLOW
6$:	CLC
	ADC HFLOW
	STA MOBVSB
	RTS
	.BYTE 065			;CKSUM 4
	.SBTTL	(CK4)
	.END
                                                                                                                                                 